"use strict";(self.webpackChunkjstnk=self.webpackChunkjstnk||[]).push([[1017],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,b=f["".concat(p,".").concat(m)]||f[m]||u[m]||s;return n?r.createElement(b,a(a({ref:t},l),{},{components:n})):r.createElement(b,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5541:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return f}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:1},p="Neossins",c={unversionedId:"projects/Neossins",id:"projects/Neossins",isDocsHomePage:!1,title:"Neossins",description:"GitHub Project//github.com/jstnk9/neossins",source:"@site/docs/projects/1-Neossins.md",sourceDirName:"projects",slug:"/projects/Neossins",permalink:"/jstnk9/docs/projects/Neossins",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"About",permalink:"/jstnk9/docs/intro"},next:{title:"TIBER-Cases",permalink:"/jstnk9/docs/projects/TIBER-Cases"}},l=[],u={toc:l};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"neossins"},"Neossins"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"GitHub Project:")," ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/jstnk9/neossins"},"https://github.com/jstnk9/neossins")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Neossins is an application based on TypeRef Hasher that belongs to G Data Cyberdefense and on GetNETGUIDs that belongs to Cylance. Only works with malware samples compiled in .NET."),(0,s.kt)("p",null,"This project aims to identify similarity between malware samples stored in the database. It is important to enrich the database with as many samples as possible to obtain better results."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Explanation"),": ",(0,s.kt)("a",{parentName:"p",href:"https://jstnk9.github.io/jstnk9/blog/TypeRef%20Hasher-The-imphash-solution-for-samples-in-NET"},"https://jstnk9.github.io/jstnk9/blog/TypeRef%20Hasher-The-imphash-solution-for-samples-in-NET")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"TypeRef Hasher tool"),": ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/GDATASoftwareAG/TypeRefHasher"},"https://github.com/GDATASoftwareAG/TypeRefHasher")," "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"GetNETGUIDs tool"),": ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cylance/GetNETGUIDs"},"https://github.com/cylance/GetNETGUIDs")))}f.isMDXComponent=!0}}]);