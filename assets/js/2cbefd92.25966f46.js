"use strict";(self.webpackChunkjstnk=self.webpackChunkjstnk||[]).push([[6081],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},h),{},{components:n})):r.createElement(f,i({ref:t},h))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8121:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return h},toc:function(){return c},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={slug:"TypeRef Hasher-The-imphash-solution-for-samples-in-NET",title:"TypeRef Hasher- The imphash solution for samples in .NET",authors:"joseliyo",tags:["threat intelligence","malware","reversing","cybersecurity","imphash","typerefhasher"]},s=void 0,p={permalink:"/jstnk9/blog/TypeRef Hasher-The-imphash-solution-for-samples-in-NET",source:"@site/blog/2021-02-10-TypeRef Hasher-The-imphash-solution-for-samples-in-NET/2021-02-10-TypeRef Hasher-The-imphash-solution-for-samples-in-NET.md",title:"TypeRef Hasher- The imphash solution for samples in .NET",description:"TL;DR",date:"2021-02-10T00:00:00.000Z",formattedDate:"February 10, 2021",tags:[{label:"threat intelligence",permalink:"/jstnk9/blog/tags/threat-intelligence"},{label:"malware",permalink:"/jstnk9/blog/tags/malware"},{label:"reversing",permalink:"/jstnk9/blog/tags/reversing"},{label:"cybersecurity",permalink:"/jstnk9/blog/tags/cybersecurity"},{label:"imphash",permalink:"/jstnk9/blog/tags/imphash"},{label:"typerefhasher",permalink:"/jstnk9/blog/tags/typerefhasher"}],readingTime:6.695,truncated:!0,authors:[{name:"Jose Luis S\xe1nchez Mart\xednez",title:"Security Researcher",url:"https://twitter.com/Joseliyo_Jstnk",imageURL:"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg",key:"joseliyo"}],prevItem:{title:"Indicator life cycle applied to threat hunting",permalink:"/jstnk9/blog/Indicator-life-cycle-applied-to-threat-hunting"},nextItem:{title:"Threat Hunting, but... Where and what? - Collection Management Framework",permalink:"/jstnk9/blog/Threat-hunting-but-where-and-what-collection-management-framework"}},h={authorsImageUrls:[void 0]},c=[{value:"TL;DR",id:"tldr",children:[],level:2}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"tldr"},"TL;DR"),(0,o.kt)("p",null,"Lately I am analyzing many malware samples from different families written in C#, C++ and other languages based on the .NET framework (.NET assembly)."),(0,o.kt)("p",null,"This has led me to find a problem when correlating different samples using hashing techniques, and that is that the imphash in a high percentage was always the same, even with different malware families, however, using other fuzzy hashing techniques I couldn\u2019t find any similarity."),(0,o.kt)("p",null,"The problem is due to the fact that during the compilation of the .NET programming languages, the source code is converted into Microsoft Intermediate Language (MSIL), which causes the same imphash to always exist, corresponding in some cases to the import of the ",(0,o.kt)("strong",{parentName:"p"},"mscoree.dll")," DLL and the ",(0,o.kt)("strong",{parentName:"p"},"_","CorExeMain")," function."),(0,o.kt)("p",null,"I have solved this problem by using another hashing tool called TypeRef Hasher developed by the folks at ",(0,o.kt)("a",{target:"_blank",href:"https://www.gdatasoftware.com/"}," G Data CyberDefense"),". This tool provides a solution to imphash only for .NET malware samples."),(0,o.kt)("p",null,"Taking advantage of the CLI they have available on GitHub, I have developed a small solution that implements and complements it."))}m.isMDXComponent=!0}}]);